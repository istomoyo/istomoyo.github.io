<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jsNote</title>
      <link href="/posts/57292.html"/>
      <url>/posts/57292.html</url>
      
        <content type="html"><![CDATA[<h2 id="Promise-的详细使用方法总结"><a href="#Promise-的详细使用方法总结" class="headerlink" title="Promise 的详细使用方法总结"></a><strong>Promise 的详细使用方法总结</strong></h2><p><code>Promise</code> 是 JavaScript 用于处理 <strong>异步操作</strong> 的重要机制。它表示一个<strong>未来可能会完成</strong>（fulfilled）、<strong>拒绝</strong>（rejected）或<strong>仍在进行中</strong>（pending）的操作。</p><hr><h2 id="1-Promise-的基本语法"><a href="#1-Promise-的基本语法" class="headerlink" title="1. Promise 的基本语法"></a><strong>1. Promise 的基本语法</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 执行异步操作</span></span><br><span class="line">  <span class="keyword">let</span> success = <span class="literal">true</span>; <span class="comment">// 假设这是异步操作的结果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;操作成功！&quot;</span>); <span class="comment">// 任务成功，调用 resolve</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;操作失败！&quot;</span>); <span class="comment">// 任务失败，调用 reject</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 then 处理成功，catch 处理失败</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功:&quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a><strong>执行过程</strong></h3><ol><li><code>new Promise()</code> 创建一个 <code>Promise</code> 对象。</li><li><code>executor</code> 函数（第一个参数）接收两个参数 <code>resolve</code> 和 <code>reject</code>，用于异步任务的成功或失败处理。</li><li><code>promise.then()</code> 处理成功的 <code>resolve</code> 结果。</li><li><code>promise.catch()</code> 处理失败的 <code>reject</code> 结果。</li></ol><hr><h2 id="2-Promise-的三种状态"><a href="#2-Promise-的三种状态" class="headerlink" title="2. Promise 的三种状态"></a><strong>2. Promise 的三种状态</strong></h2><table><thead><tr><th>状态</th><th>描述</th></tr></thead><tbody><tr><td><code>pending</code>（进行中）</td><td>初始状态，异步任务尚未完成</td></tr><tr><td><code>fulfilled</code>（已成功）</td><td>任务成功完成，调用 <code>resolve()</code></td></tr><tr><td><code>rejected</code>（已失败）</td><td>任务失败，调用 <code>reject()</code></td></tr></tbody></table><p>一旦 <code>Promise</code> 变为 <code>fulfilled</code> 或 <code>rejected</code>，它的状态就不会再改变。</p><hr><h2 id="3-Promise-链式调用"><a href="#3-Promise-链式调用" class="headerlink" title="3. Promise 链式调用"></a><strong>3. Promise 链式调用</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">10</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 10</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 20</span></span><br><span class="line">    <span class="keyword">return</span> num * <span class="number">3</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">num</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 60</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;出错了:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h3><ul><li><code>then()</code> <strong>返回一个新的 Promise</strong>，可以继续调用 <code>then()</code> 处理下一个异步任务。</li><li>如果 <code>then()</code> 里面抛出错误，会跳到 <code>catch()</code> 进行错误处理。</li></ul><hr><h2 id="4-Promise-的-catch-处理错误"><a href="#4-Promise-的-catch-处理错误" class="headerlink" title="4. Promise 的 catch() 处理错误"></a><strong>4. Promise 的 <code>catch()</code> 处理错误</strong></h2><p>如果 <code>Promise</code> 发生错误，就会进入 <code>catch()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;故意出错！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;错误:&quot;</span>, error));</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>catch()</code> 只捕获<strong>前面链式调用</strong>中的错误。</li><li><code>catch()</code> 相当于 <code>.then(null, errorHandler)</code>，但更简洁。</li></ul><hr><h2 id="5-Promise-的-finally"><a href="#5-Promise-的-finally" class="headerlink" title="5. Promise 的 finally()"></a><strong>5. Promise 的 <code>finally()</code></strong></h2><p>无论 <code>Promise</code> 成功或失败，<code>finally()</code> <strong>都会执行</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;完成任务&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功:&quot;</span>, res))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;失败:&quot;</span>, err))</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;任务结束&quot;</span>));</span><br></pre></td></tr></table></figure><p>✅ <strong>常见用途：</strong></p><ul><li>关闭加载动画</li><li>清理资源</li></ul><hr><h2 id="6-并行执行多个-Promise"><a href="#6-并行执行多个-Promise" class="headerlink" title="6. 并行执行多个 Promise"></a><strong>6. 并行执行多个 Promise</strong></h2><h3 id="6-1-Promise-all"><a href="#6-1-Promise-all" class="headerlink" title="6.1 Promise.all()"></a><strong>6.1 <code>Promise.all()</code></strong></h3><p>一次性执行多个 <code>Promise</code>，<strong>等所有任务完成</strong>后再返回：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">    res.<span class="title function_">json</span>()</span><br><span class="line">  ),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/2&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">    res.<span class="title function_">json</span>()</span><br><span class="line">  ),</span><br><span class="line">])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">[result1, result2]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结果1:&quot;</span>, result1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结果2:&quot;</span>, result2);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;失败:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>✅ <strong>特点</strong>：</p><ul><li><strong>全部成功</strong> ✅ → 返回所有 <code>Promise</code> 结果的数组 <code>[res1, res2, ...]</code></li><li><strong>任何一个失败</strong> ❌ → 立即返回错误，不执行后续任务</li></ul><hr><h3 id="6-2-Promise-allSettled"><a href="#6-2-Promise-allSettled" class="headerlink" title="6.2 Promise.allSettled()"></a><strong>6.2 <code>Promise.allSettled()</code></strong></h3><p>等待<strong>所有 <code>Promise</code> 结束</strong>（无论成功或失败）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>), <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;失败&quot;</span>)]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">results</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(results)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>✅ <strong>特点</strong>：</p><ul><li><strong>不会中断</strong>，返回所有 <code>Promise</code> 状态 <code>&#123; status, value/reason &#125;</code></li><li>适合需要<strong>收集所有任务结果</strong>的场景</li></ul><hr><h3 id="6-3-Promise-race"><a href="#6-3-Promise-race" class="headerlink" title="6.3 Promise.race()"></a><strong>6.3 <code>Promise.race()</code></strong></h3><p>返回<strong>最快完成</strong>的 <code>Promise</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;任务1完成&quot;</span>), <span class="number">1000</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;任务2完成&quot;</span>), <span class="number">500</span>)),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// &quot;任务2完成&quot;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用场景</strong>：</p><ul><li><strong>超时控制</strong>（例如 HTTP 请求超时）</li><li>获取<strong>最快响应</strong>的请求</li></ul><hr><h3 id="6-4-Promise-any"><a href="#6-4-Promise-any" class="headerlink" title="6.4 Promise.any()"></a><strong>6.4 <code>Promise.any()</code></strong></h3><p><strong>返回</strong>第一个**成功的 <code>Promise</code>**：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;失败1&quot;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;失败2&quot;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>),</span><br><span class="line">])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>) <span class="comment">// &quot;成功&quot;</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>); <span class="comment">// 不会触发</span></span><br></pre></td></tr></table></figure><p>✅ <strong>特点</strong>：</p><ul><li>只要有 <strong>1 个成功</strong>就返回，忽略失败</li><li><strong>所有都失败</strong>时才会 <code>catch()</code></li></ul><hr><h2 id="7-Promise-结合-async-await"><a href="#7-Promise-结合-async-await" class="headerlink" title="7. Promise 结合 async/await"></a><strong>7. Promise 结合 <code>async/await</code></strong></h2><p><code>async/await</code> 让异步代码看起来像同步代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取数据:&quot;</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求失败:&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><p>✅ <strong>优点</strong>：</p><ul><li><strong>代码更清晰</strong></li><li><strong>自动返回 Promise</strong></li><li><strong>错误处理简单</strong>（使用 <code>try...catch</code>）</li></ul><hr><h2 id="8-自己封装-Promise"><a href="#8-自己封装-Promise" class="headerlink" title="8. 自己封装 Promise"></a><strong>8. 自己封装 <code>Promise</code></strong></h2><h3 id="8-1-封装-setTimeout"><a href="#8-1-封装-setTimeout" class="headerlink" title="8.1 封装 setTimeout"></a><strong>8.1 封装 <code>setTimeout</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wait</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">wait</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2 秒后执行&quot;</span>));</span><br></pre></td></tr></table></figure><p>✅ <strong>可用于</strong>：防抖、防止短时间多次请求</p><hr><h3 id="8-2-封装-AJAX-请求"><a href="#8-2-封装-AJAX-请求" class="headerlink" title="8.2 封装 AJAX 请求"></a><strong>8.2 封装 AJAX 请求</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetch</span>(url)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">resolve</span>(data))</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="title function_">reject</span>(error));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><p>✅ <strong>可以替代 <code>axios</code> 进行 API 请求</strong></p><hr><h2 id="9-总结"><a href="#9-总结" class="headerlink" title="9. 总结"></a><strong>9. 总结</strong></h2><p>✅ <strong>基本用法</strong></p><ul><li><code>new Promise((resolve, reject) =&gt; &#123;...&#125;)</code></li><li><code>.then()</code> 处理成功，<code>.catch()</code> 处理失败</li><li><code>.finally()</code> 统一执行清理任务</li></ul><p>✅ <strong>高级用法</strong></p><ul><li><code>Promise.all()</code> ✅：所有成功才返回，任意失败则抛错</li><li><code>Promise.allSettled()</code> ✅：所有都返回结果，不会中断</li><li><code>Promise.race()</code> ✅：返回第一个完成的 <code>Promise</code></li><li><code>Promise.any()</code> ✅：返回第一个<strong>成功</strong>的 <code>Promise</code></li></ul><p>✅ <strong>推荐使用 <code>async/await</code></strong></p><ul><li>让代码更清晰</li><li>用 <code>try...catch</code> 处理错误</li></ul><hr><p><strong>💡 <code>Promise</code> 是现代 JavaScript 异步编程的核心，掌握它可以提升你的开发能力！🚀</strong></p><h1 id="2-async-await"><a href="#2-async-await" class="headerlink" title="2.async &amp; await"></a>2.async &amp; await</h1><p><code>async</code> 和 <code>await</code> 并 <strong>不是严格一一对应</strong> 的。虽然 <code>await</code> 只能在 <code>async</code> 函数内使用，但一个 <code>async</code> 函数中可以有 **多个 <code>await</code>**，也可以 **不使用 <code>await</code>**。</p><hr><h2 id="1-一个-async-函数可以有多个-await"><a href="#1-一个-async-函数可以有多个-await" class="headerlink" title="1. 一个 async 函数可以有多个 await"></a><strong>1. 一个 <code>async</code> 函数可以有多个 <code>await</code></strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result1 = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;数据1&quot;</span>), <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result2 = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;数据2&quot;</span>), <span class="number">1000</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;全部完成&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>await</code> 等待 <code>Promise</code> 解决（resolve），然后继续执行下一行代码。</li><li>这里 <code>async</code> 对应多个 <code>await</code>。</li></ul><hr><h2 id="2-async-函数可以不使用-await"><a href="#2-async-函数可以不使用-await" class="headerlink" title="2. async 函数可以不使用 await"></a><strong>2. <code>async</code> 函数可以不使用 <code>await</code></strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">noAwait</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;直接返回&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">noAwait</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 直接返回</span></span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>async</code> 函数默认会返回一个 <code>Promise</code>，即使内部没有 <code>await</code>。</li></ul><hr><h2 id="3-await-也可以嵌套在非-async-函数中"><a href="#3-await-也可以嵌套在非-async-函数中" class="headerlink" title="3. await 也可以嵌套在非 async 函数中"></a><strong>3. <code>await</code> 也可以嵌套在非 <code>async</code> 函数中</strong></h2><p>虽然 <code>await</code> 必须在 <code>async</code> 函数中使用，但可以通过 <code>async</code> 包裹：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">normalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;异步数据&quot;</span>), <span class="number">1000</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">normalFunction</span>();</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li>这里 <code>normalFunction</code> 不是 <code>async</code>，但内部用 <strong>立即执行的 <code>async</code> 函数</strong> 来使用 <code>await</code>。</li></ul><hr><h2 id="4-await-只会等待当前-Promise，不会阻塞整个程序"><a href="#4-await-只会等待当前-Promise，不会阻塞整个程序" class="headerlink" title="4. await 只会等待当前 Promise，不会阻塞整个程序"></a><strong>4. <code>await</code> 只会等待当前 <code>Promise</code>，不会阻塞整个程序</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;数据加载完成&quot;</span>), <span class="number">2000</span>)</span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不会被阻塞&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>输出顺序：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始</span><br><span class="line">不会被阻塞</span><br><span class="line">(2秒后)</span><br><span class="line">数据加载完成</span><br><span class="line">结束</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>await</code> <strong>只会阻塞当前 <code>async</code> 函数</strong>，不会影响外部同步代码。</li></ul><hr><h2 id="5-await-不一定需要-async，在顶层可用（ES2022）"><a href="#5-await-不一定需要-async，在顶层可用（ES2022）" class="headerlink" title="5. await 不一定需要 async，在顶层可用（ES2022）"></a><strong>5. <code>await</code> 不一定需要 <code>async</code>，在顶层可用（ES2022）</strong></h2><p>在 <strong>ES2022（ES13）</strong> 及更新版本中，<code>await</code> 也能在顶层作用域直接使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;顶层 await&quot;</span>)), <span class="number">1000</span>)</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行完毕&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>（但在旧环境中，必须用 <code>async</code> 包裹）</strong></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><table><thead><tr><th>用法</th><th>是否需要 <code>async</code></th></tr></thead><tbody><tr><td><code>await</code> 在 <code>async</code> 函数中使用</td><td>✅ 必须</td></tr><tr><td><code>async</code> 函数可以不含 <code>await</code></td><td>✅ 允许</td></tr><tr><td>一个 <code>async</code> 函数可有多个 <code>await</code></td><td>✅ 允许</td></tr><tr><td><code>await</code> 在非 <code>async</code> 函数中</td><td>❌（但可用 <code>async</code> 立即执行函数）</td></tr><tr><td><code>await</code> 在顶层（ES2022+）</td><td>✅ 允许</td></tr></tbody></table><p>所以，**<code>async</code> 和 <code>await</code> 并不是一一对应** 的，而是 <code>await</code> 依赖 <code>async</code>，但 <code>async</code> **不一定需要 <code>await</code>**。</p><h1 id="3-Debounce-Throttle"><a href="#3-Debounce-Throttle" class="headerlink" title="3.Debounce &amp; Throttle"></a>3.Debounce &amp; Throttle</h1><p>防抖（Debounce）和节流（Throttle）是两种常见的优化函数执行频率的技术，适用于监听 <code>resize</code>、<code>scroll</code>、<code>input</code>、<code>click</code> 等事件，避免频繁触发回调函数导致性能问题。</p><hr><h2 id="1-防抖（Debounce）"><a href="#1-防抖（Debounce）" class="headerlink" title="1. 防抖（Debounce）"></a><strong>1. 防抖（Debounce）</strong></h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点：</strong></h3><ul><li>只有在 <strong>停止触发事件后一段时间</strong>，回调函数才会执行。</li><li>如果在等待时间内又触发了事件，则重新计时。</li></ul><h3 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a><strong>适用场景：</strong></h3><ul><li><strong>搜索框输入</strong>（用户停止输入后再触发请求）。</li><li><strong>窗口调整大小</strong>（用户调整完毕后再触发计算）。</li><li><strong>按钮防止重复点击</strong>（短时间内多次点击，只触发最后一次）。</li></ul><h3 id="封装防抖函数"><a href="#封装防抖函数" class="headerlink" title="封装防抖函数"></a><strong>封装防抖函数</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args), delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a><strong>使用示例</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#search&quot;</span>);</span><br><span class="line">input.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;input&quot;</span>,</span><br><span class="line">  <span class="title function_">debounce</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;搜索内容:&quot;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="2-节流（Throttle）"><a href="#2-节流（Throttle）" class="headerlink" title="2. 节流（Throttle）"></a><strong>2. 节流（Throttle）</strong></h2><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a><strong>特点：</strong></h3><ul><li><strong>一定时间间隔内</strong> 只允许执行一次回调，即使事件连续触发。</li><li>适用于 <strong>控制高频触发的事件</strong>，保证在一定时间内执行一次。</li></ul><h3 id="适用场景：-1"><a href="#适用场景：-1" class="headerlink" title="适用场景："></a><strong>适用场景：</strong></h3><ul><li><strong>滚动事件</strong>（<code>scroll</code> 监听，防止频繁触发）。</li><li><strong>鼠标移动事件</strong>（<code>mousemove</code> 监听，减少计算频率）。</li><li><strong>按钮防止重复提交</strong>（限制一定时间内只能点击一次）。</li></ul><h3 id="封装节流函数"><a href="#封装节流函数" class="headerlink" title="封装节流函数"></a><strong>封装节流函数</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">300</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - lastTime &gt;= delay) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      lastTime = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a><strong>使用示例</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;scroll&quot;</span>,</span><br><span class="line">  <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发滚动事件&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleTimeString</span>());</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><hr><h2 id="3-结合-leading-和-trailing-优化防抖和节流"><a href="#3-结合-leading-和-trailing-优化防抖和节流" class="headerlink" title="3. 结合 leading 和 trailing 优化防抖和节流"></a><strong>3. 结合 <code>leading</code> 和 <code>trailing</code> 优化防抖和节流</strong></h2><h3 id="优化防抖：支持-immediate-选项"><a href="#优化防抖：支持-immediate-选项" class="headerlink" title="优化防抖：支持 immediate 选项"></a><strong>优化防抖：支持 <code>immediate</code> 选项</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">300</span>, immediate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (immediate &amp;&amp; !timer) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleInput = <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;立即执行&quot;</span>), <span class="number">500</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#search&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, handleInput);</span><br></pre></td></tr></table></figure><h3 id="优化节流：支持-leading-和-trailing"><a href="#优化节流：支持-leading-和-trailing" class="headerlink" title="优化节流：支持 leading 和 trailing"></a><strong>优化节流：支持 <code>leading</code> 和 <code>trailing</code></strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">300</span>, &#123; leading = <span class="literal">true</span>, trailing = <span class="literal">true</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>,</span><br><span class="line">    timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!lastTime &amp;&amp; !leading) lastTime = now;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> remaining = delay - (now - lastTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      lastTime = now;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; trailing) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        lastTime = leading ? <span class="title class_">Date</span>.<span class="title function_">now</span>() : <span class="number">0</span>;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleScroll = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;节流优化&quot;</span>), <span class="number">1000</span>, &#123;</span><br><span class="line">  <span class="attr">leading</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">trailing</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, handleScroll);</span><br></pre></td></tr></table></figure><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><table><thead><tr><th></th><th>防抖（Debounce）</th><th>节流（Throttle）</th></tr></thead><tbody><tr><td><strong>触发方式</strong></td><td><strong>停止触发后</strong> 等待一段时间执行</td><td><strong>固定间隔时间</strong> 执行</td></tr><tr><td><strong>核心机制</strong></td><td><strong>多次触发只执行最后一次</strong></td><td><strong>间隔时间内最多执行一次</strong></td></tr><tr><td><strong>适用场景</strong></td><td>输入框、搜索、窗口调整大小</td><td>滚动、鼠标移动、按钮防连点</td></tr><tr><td><strong>优化方式</strong></td><td>支持 <code>immediate</code> 立即执行</td><td>支持 <code>leading</code> 和 <code>trailing</code></td></tr></tbody></table><p>这两种技术可以根据不同需求组合使用，例如：</p><ul><li><strong>搜索框</strong>：防抖，避免频繁请求。</li><li><strong>按钮点击</strong>：节流，防止短时间多次提交。</li><li><strong>滚动监听</strong>：节流，减少 <code>scroll</code> 事件执行次数。</li></ul><p>你可以根据实际需求选择适合的方法 🚀！</p><h1 id="4-递归组件"><a href="#4-递归组件" class="headerlink" title="4.递归组件"></a>4.递归组件</h1><p>递归组件是 Vue.js 中非常强大的功能，特别适合处理<strong>嵌套数据结构</strong>的场景，比如树形结构、嵌套菜单、骨架屏等。递归组件的核心思想是<strong>组件在其模板中调用自身</strong>，从而实现嵌套渲染。</p><p>以下是递归组件的详细说明和使用方法：</p><hr><h3 id="1-递归组件的基本概念"><a href="#1-递归组件的基本概念" class="headerlink" title="1. 递归组件的基本概念"></a>1. <strong>递归组件的基本概念</strong></h3><p>递归组件是指一个组件在其模板中调用自身。为了实现递归，组件需要满足以下条件：</p><ol><li><strong>命名</strong>：组件必须有一个 <code>name</code> 属性，以便在模板中调用自身。</li><li><strong>终止条件</strong>：递归必须有一个终止条件，否则会导致无限递归。</li></ol><hr><h3 id="2-递归组件的实现步骤"><a href="#2-递归组件的实现步骤" class="headerlink" title="2. 递归组件的实现步骤"></a>2. <strong>递归组件的实现步骤</strong></h3><h4 id="步骤-1：定义组件"><a href="#步骤-1：定义组件" class="headerlink" title="步骤 1：定义组件"></a>步骤 1：定义组件</h4><p>在 Vue 中，定义一个递归组件非常简单。只需在组件的模板中调用自身即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;recursive-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;recursive-component&quot;</span>, <span class="comment">// 必须定义 name</span></span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; data.name &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;recursive-component</span></span><br><span class="line"><span class="string">        v-if=&quot;data.children&quot;</span></span><br><span class="line"><span class="string">        v-for=&quot;child in data.children&quot;</span></span><br><span class="line"><span class="string">        :key=&quot;child.id&quot;</span></span><br><span class="line"><span class="string">        :data=&quot;child&quot;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="步骤-2：使用组件"><a href="#步骤-2：使用组件" class="headerlink" title="步骤 2：使用组件"></a>步骤 2：使用组件</h4><p>在父组件中使用递归组件，并传入嵌套数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">treeData</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Root&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;Child 1&quot;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;Grandchild 1&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;Grandchild 2&quot;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;Child 2&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;recursive-component :data=&quot;treeData&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="步骤-3：渲染结果"><a href="#步骤-3：渲染结果" class="headerlink" title="步骤 3：渲染结果"></a>步骤 3：渲染结果</h4><p>上述代码会渲染出以下结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Grandchild 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Grandchild 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-递归组件的关键点"><a href="#3-递归组件的关键点" class="headerlink" title="3. 递归组件的关键点"></a>3. <strong>递归组件的关键点</strong></h3><h4 id="1-name-属性"><a href="#1-name-属性" class="headerlink" title="1. name 属性"></a>1. <strong><code>name</code> 属性</strong></h4><p>递归组件必须定义 <code>name</code> 属性，因为 Vue 需要通过 <code>name</code> 来识别组件自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;recursive-component&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;recursive-component&quot;</span>, <span class="comment">// 必须定义 name</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-终止条件"><a href="#2-终止条件" class="headerlink" title="2. 终止条件"></a>2. <strong>终止条件</strong></h4><p>递归必须有一个终止条件，否则会导致无限递归。通常通过 <code>v-if</code> 或 <code>v-for</code> 来控制递归的终止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;recursive-component</span><br><span class="line">  v-<span class="keyword">if</span>=<span class="string">&quot;data.children&quot;</span> <span class="comment">// 终止条件：如果没有 children，则停止递归</span></span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">&quot;child in data.children&quot;</span></span><br><span class="line">  :key=<span class="string">&quot;child.id&quot;</span></span><br><span class="line">  :data=<span class="string">&quot;child&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h4 id="3-props-传递数据"><a href="#3-props-传递数据" class="headerlink" title="3. props 传递数据"></a>3. <strong><code>props</code> 传递数据</strong></h4><p>递归组件通过 <code>props</code> 接收数据，并将数据传递给下一层递归。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><hr><h3 id="4-递归组件的应用场景"><a href="#4-递归组件的应用场景" class="headerlink" title="4. 递归组件的应用场景"></a>4. <strong>递归组件的应用场景</strong></h3><p>递归组件非常适合处理以下场景：</p><ol><li><strong>树形结构</strong>：如文件目录、组织架构等。</li><li><strong>嵌套菜单</strong>：如多级导航菜单。</li><li><strong>骨架屏</strong>：如动态生成嵌套的骨架屏结构。</li><li><strong>评论系统</strong>：如嵌套的评论回复。</li></ol><hr><h3 id="5-完整示例：树形结构渲染"><a href="#5-完整示例：树形结构渲染" class="headerlink" title="5. 完整示例：树形结构渲染"></a>5. <strong>完整示例：树形结构渲染</strong></h3><p>以下是一个完整的树形结构渲染示例：</p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> treeData = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Root&quot;</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Child 1&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;Grandchild 1&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;Grandchild 2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">5</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;Child 2&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;tree-node&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;tree-node&quot;</span>,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;p&gt;&#123;&#123; data.name &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;tree-node</span></span><br><span class="line"><span class="string">        v-if=&quot;data.children&quot;</span></span><br><span class="line"><span class="string">        v-for=&quot;child in data.children&quot;</span></span><br><span class="line"><span class="string">        :key=&quot;child.id&quot;</span></span><br><span class="line"><span class="string">        :data=&quot;child&quot;</span></span><br><span class="line"><span class="string">      /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      treeData,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;tree-node :data=&quot;treeData&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="渲染结果"><a href="#渲染结果" class="headerlink" title="渲染结果"></a>渲染结果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Root<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Grandchild 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Grandchild 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a>6. <strong>注意事项</strong></h3><ol><li><p><strong>性能问题</strong>：</p><ul><li>递归组件的嵌套层级不宜过深，否则可能导致性能问题。</li><li>可以通过 <code>v-if</code> 或 <code>v-for</code> 的优化来减少不必要的渲染。</li></ul></li><li><p><strong>终止条件</strong>：</p><ul><li>必须确保递归有终止条件，否则会导致无限递归和栈溢出。</li></ul></li><li><p><strong><code>key</code> 的使用</strong>：</p><ul><li>在 <code>v-for</code> 中必须为每个子元素设置唯一的 <code>key</code>，以便 Vue 高效地更新 DOM。</li></ul></li></ol><hr><h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. <strong>总结</strong></h3><p>递归组件是 Vue.js 中处理嵌套数据的强大工具。通过定义 <code>name</code> 属性、设置终止条件和传递 <code>props</code>，可以轻松实现树形结构、嵌套菜单等复杂场景的渲染。在实际开发中，递归组件的使用需要结合具体场景，注意性能和终止条件。</p><p>如果有其他问题，欢迎随时提问！</p><h1 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h1><p>在 Vue 3 的 <code>defineProps()</code> 中，可以对 <code>props</code> 进行<strong>类型校验</strong>、<strong>默认值</strong>和<strong>必填验证</strong>。</p><hr><h2 id="📌-1-props-属性详细解析"><a href="#📌-1-props-属性详细解析" class="headerlink" title="📌 1. props 属性详细解析"></a><strong>📌 1. <code>props</code> 属性详细解析</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">user</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Object</span>,      <span class="comment">// 指定类型（如 String, Number, Boolean, Object, Array, Function）</span></span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,    <span class="comment">// 是否必须传递（true = 必填）</span></span><br><span class="line">    <span class="attr">default</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">&quot;默认用户&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;), <span class="comment">// 默认值（对象要用箭头函数）</span></span><br><span class="line">    <span class="attr">validator</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;  <span class="comment">// 自定义校验规则</span></span><br><span class="line">      <span class="keyword">return</span> value.<span class="property">name</span> &amp;&amp; <span class="keyword">typeof</span> value.<span class="property">age</span> === <span class="string">&quot;number&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="📌-2-Vue-3-版本"><a href="#📌-2-Vue-3-版本" class="headerlink" title="📌 2. Vue 3 &#96;&#96; 版本"></a><strong>📌 2. Vue 3 &#96;&#96; 版本</strong></h2><p>在 &#96;&#96; 里，<code>defineProps()</code><strong>不能</strong>直接写对象校验，而是用 TypeScript 或<code>defineProps()</code> 传递对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    required: true,</span><br><span class="line">    default: () =&gt; (&#123; name: &quot;默认用户&quot;, age: 18 &#125;),</span><br><span class="line">    validator: (value) =&gt; &#123;</span><br><span class="line">      return value.name &amp;&amp; typeof value.age === &quot;number&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="📌-3-各参数作用"><a href="#📌-3-各参数作用" class="headerlink" title="📌 3. 各参数作用"></a><strong>📌 3. 各参数作用</strong></h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>type</code></td><td>指定 <code>props</code> 的类型，如 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Object</code> 等</td></tr><tr><td><code>required</code></td><td>是否<strong>必须传递</strong>，<code>true</code> &#x3D; 必填</td></tr><tr><td><code>default</code></td><td><strong>默认值</strong>（对象&#x2F;数组要用箭头函数）</td></tr><tr><td><code>validator</code></td><td><strong>自定义校验规则</strong>，返回 <code>true</code> 代表合法，<code>false</code> 代表报错</td></tr></tbody></table><hr><h2 id="📌-4-示例"><a href="#📌-4-示例" class="headerlink" title="📌 4. 示例"></a><strong>📌 4. 示例</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  user: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    required: true,</span><br><span class="line">    default: () =&gt; (&#123; name: &quot;默认用户&quot;, age: 18 &#125;),</span><br><span class="line">    validator: (value) =&gt; &#123;</span><br><span class="line">      return (</span><br><span class="line">        value &amp;&amp; typeof value.name === &quot;string&quot; &amp;&amp; typeof value.age === &quot;number&quot;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;姓名: &#123;&#123; props.user.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;年龄: &#123;&#123; props.user.age &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="📌-5-type-可选值"><a href="#📌-5-type-可选值" class="headerlink" title="📌 5. type 可选值"></a><strong>📌 5. <code>type</code> 可选值</strong></h2><table><thead><tr><th><code>type</code></th><th>说明</th></tr></thead><tbody><tr><td><code>String</code></td><td>字符串</td></tr><tr><td><code>Number</code></td><td>数字</td></tr><tr><td><code>Boolean</code></td><td>布尔值</td></tr><tr><td><code>Object</code></td><td>对象</td></tr><tr><td><code>Array</code></td><td>数组</td></tr><tr><td><code>Function</code></td><td>函数</td></tr></tbody></table><hr><h2 id="📌-6-validator-自定义校验"><a href="#📌-6-validator-自定义校验" class="headerlink" title="📌 6. validator 自定义校验"></a><strong>📌 6. <code>validator</code> 自定义校验</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  age: &#123;</span><br><span class="line">    type: Number,</span><br><span class="line">    validator: (value) =&gt; value &gt; 0 &amp;&amp; value &lt; 150, // 只能是 0~150 的数字</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>如果 <code>age</code> 小于 0 或大于 150，Vue <strong>不会报错</strong>，但会在 <strong>控制台警告</strong>⚠️。</li></ul><hr><h2 id="🚀-最佳实践"><a href="#🚀-最佳实践" class="headerlink" title="🚀 最佳实践"></a><strong>🚀 最佳实践</strong></h2><ul><li>**尽量指定 <code>type</code>**，避免意外类型</li><li><strong>如果是对象或数组，<code>default</code> 需要用函数返回</strong></li><li><strong>使用 <code>validator</code> 进行额外校验</strong></li><li><strong><code>required: true</code> 适用于必须传的 <code>props</code></strong></li></ul><p>这样可以让 <code>props</code> <strong>更加健壮</strong>，避免意外数据导致错误！🎯</p><h1 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h1><p>在 Vue 3 中，组件通信方式主要包括以下几种：</p><hr><h3 id="1-Props-Emit（父子组件通信）"><a href="#1-Props-Emit（父子组件通信）" class="headerlink" title="1. Props &#x2F; Emit（父子组件通信）"></a>1. <strong>Props &#x2F; Emit（父子组件通信）</strong></h3><ul><li><strong>父组件 → 子组件</strong>：使用 <code>props</code> 传递数据。</li><li><strong>子组件 → 父组件</strong>：使用 <code>emit</code> 触发自定义事件，向父组件发送数据。</li></ul><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child :message=&quot;parentMsg&quot; @updateMessage=&quot;handleUpdate&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line"></span><br><span class="line">const parentMsg = ref(&quot;Hello from Parent&quot;);</span><br><span class="line"></span><br><span class="line">const handleUpdate = (newMsg) =&gt; &#123;</span><br><span class="line">  parentMsg.value = newMsg;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- Child.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;updateParent&quot;&gt;Update Parent&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; defineProps, defineEmits &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const props = defineProps([&quot;message&quot;]);</span><br><span class="line">const emit = defineEmits([&quot;updateMessage&quot;]);</span><br><span class="line"></span><br><span class="line">const updateParent = () =&gt; &#123;</span><br><span class="line">  emit(&quot;updateMessage&quot;, &quot;Hello from Child!&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="2-Provide-Inject（跨层级组件通信）"><a href="#2-Provide-Inject（跨层级组件通信）" class="headerlink" title="2. Provide &#x2F; Inject（跨层级组件通信）"></a>2. <strong>Provide &#x2F; Inject（跨层级组件通信）</strong></h3><p>适用于<strong>深层嵌套的组件</strong>，可以让祖先组件提供数据，后代组件注入数据。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Parent /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line"></span><br><span class="line">const message = ref(&quot;Hello from Provide!&quot;);</span><br><span class="line">provide(&quot;sharedMessage&quot;, message);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- Child.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; sharedMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; inject &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const sharedMessage = inject(&quot;sharedMessage&quot;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="3-Event-Bus（兄弟组件通信）"><a href="#3-Event-Bus（兄弟组件通信）" class="headerlink" title="3. Event Bus（兄弟组件通信）"></a>3. <strong>Event Bus（兄弟组件通信）</strong></h3><p>Vue 3 没有内置的事件总线，但可以使用 <strong>mitt</strong>（推荐）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mitt</span><br></pre></td></tr></table></figure><h4 id="创建事件总线-eventBus-js-："><a href="#创建事件总线-eventBus-js-：" class="headerlink" title="创建事件总线 (eventBus.js)："></a>创建事件总线 (<code>eventBus.js</code>)：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="title function_">mitt</span>();</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> eventBus;</span><br></pre></td></tr></table></figure><h4 id="组件通信："><a href="#组件通信：" class="headerlink" title="组件通信："></a>组件通信：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Sender.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import eventBus from &quot;../eventBus&quot;;</span><br><span class="line">const sendMessage = () =&gt; &#123;</span><br><span class="line">  eventBus.emit(&quot;customEvent&quot;, &quot;Hello from Sender!&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;sendMessage&quot;&gt;Send Message&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- Receiver.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import eventBus from &quot;../eventBus&quot;;</span><br><span class="line"></span><br><span class="line">const receivedMessage = ref(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  eventBus.on(&quot;customEvent&quot;, (msg) =&gt; &#123;</span><br><span class="line">    receivedMessage.value = msg;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;Received: &#123;&#123; receivedMessage &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="4-Pinia（全局状态管理）"><a href="#4-Pinia（全局状态管理）" class="headerlink" title="4. Pinia（全局状态管理）"></a>4. <strong>Pinia（全局状态管理）</strong></h3><p>Vue 3 推荐使用 <code>Pinia</code> 作为状态管理工具（比 Vuex 更轻量）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><h4 id="创建-store："><a href="#创建-store：" class="headerlink" title="创建 store："></a>创建 <code>store</code>：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stores/counter.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&quot;counter&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; count, increment &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="在组件中使用："><a href="#在组件中使用：" class="headerlink" title="在组件中使用："></a>在组件中使用：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Counter.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;store.increment&quot;&gt;Count: &#123;&#123; store.count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &quot;../stores/counter&quot;;</span><br><span class="line">const store = useCounterStore();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="5-attrs-和-v-bind（高阶组件通信）"><a href="#5-attrs-和-v-bind（高阶组件通信）" class="headerlink" title="5. $attrs 和 v-bind（高阶组件通信）"></a>5. <strong>$attrs 和 v-bind（高阶组件通信）</strong></h3><p>适用于<strong>透传 props</strong> 到子组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Parent.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Child msg=&quot;Hello&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;!-- Child.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;GrandChild v-bind=&quot;$attrs&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&quot;msg&quot;]);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- GrandChild.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; msg &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&quot;msg&quot;]);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="6-Ref-Reactive-共享状态"><a href="#6-Ref-Reactive-共享状态" class="headerlink" title="6. Ref &#x2F; Reactive 共享状态"></a>6. <strong>Ref &#x2F; Reactive 共享状态</strong></h3><p>多个组件<strong>共享</strong>响应式数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> globalState = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line">&lt;!-- A.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;globalState.count++&quot;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; globalState &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- B.<span class="property">vue</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: &#123;&#123; globalState.count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; globalState &#125; <span class="keyword">from</span> <span class="string">&quot;../store&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li><strong>父子通信</strong> → <code>props</code> &#x2F; <code>emit</code></li><li><strong>兄弟通信</strong> → <code>mitt</code> &#x2F; <code>Pinia</code></li><li><strong>跨层级</strong> → <code>provide</code> &#x2F; <code>inject</code></li><li><strong>全局状态</strong> → <code>Pinia</code> &#x2F; <code>reactive</code></li><li><strong>透传属性</strong> → <code>$attrs</code></li></ul><p>根据实际场景选择最合适的方式！🚀</p><h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>你提供的是<strong>ISO 8601 格式的时间字符串</strong>（<code>&quot;2024-03-21T13:00:00&quot;</code>），在 JavaScript 中，可以使用 <code>Date</code> 对象来解析、格式化或转换它。</p><hr><h2 id="1-解析-ISO-时间字符串"><a href="#1-解析-ISO-时间字符串" class="headerlink" title="1. 解析 ISO 时间字符串"></a><strong>1. 解析 ISO 时间字符串</strong></h2><p>JavaScript <code>Date</code> 构造函数可以直接解析这种格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dateStr = <span class="string">&quot;2024-03-21T13:00:00&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br><span class="line"><span class="comment">// 输出: Thu Mar 21 2024 13:00:00 GMT+0000 (UTC)</span></span><br></pre></td></tr></table></figure><p>📌 <code>new Date(dateStr)</code> 会自动解析 ISO 格式，并转换为<strong>本地时间</strong>。</p><hr><h2 id="2-提取日期、时间信息"><a href="#2-提取日期、时间信息" class="headerlink" title="2. 提取日期、时间信息"></a><strong>2. 提取日期、时间信息</strong></h2><p>你可以使用 <code>getFullYear()</code>、<code>getMonth()</code>、<code>getDate()</code> 等方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>); <span class="comment">// 3 （注意：`getMonth()` 从 0 开始）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-格式化为-YYYY-MM-DD-HH-mm-ss"><a href="#3-格式化为-YYYY-MM-DD-HH-mm-ss" class="headerlink" title="3. 格式化为 YYYY-MM-DD HH:mm:ss"></a><strong>3. 格式化为 <code>YYYY-MM-DD HH:mm:ss</code></strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatDate</span>(<span class="params">date</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> Y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">  <span class="keyword">const</span> M = <span class="title class_">String</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> D = <span class="title class_">String</span>(date.<span class="title function_">getDate</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> H = <span class="title class_">String</span>(date.<span class="title function_">getHours</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> m = <span class="title class_">String</span>(date.<span class="title function_">getMinutes</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> s = <span class="title class_">String</span>(date.<span class="title function_">getSeconds</span>()).<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;Y&#125;</span>-<span class="subst">$&#123;M&#125;</span>-<span class="subst">$&#123;D&#125;</span> <span class="subst">$&#123;H&#125;</span>:<span class="subst">$&#123;m&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">formatDate</span>(date)); <span class="comment">// &quot;2024-03-21 13:00:00&quot;</span></span><br></pre></td></tr></table></figure><p>📌 <code>padStart(2, &quot;0&quot;)</code> 用于补零，确保格式一致。</p><hr><h2 id="4-转换为-UTC-时间"><a href="#4-转换为-UTC-时间" class="headerlink" title="4. 转换为 UTC 时间"></a><strong>4. 转换为 UTC 时间</strong></h2><p>如果你想以 UTC 时间显示，而不是本地时间：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toISOString</span>());</span><br><span class="line"><span class="comment">// 结果: &quot;2024-03-21T13:00:00.000Z&quot;</span></span><br></pre></td></tr></table></figure><p>📌 <code>toISOString()</code> 返回标准 <code>UTC</code> 格式（末尾带 <code>Z</code> 表示 <code>UTC</code> 时区）。</p><p>如果要手动获取 UTC 时间：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMonth</span>() + <span class="number">1</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCDate</span>()); <span class="comment">// 21</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCHours</span>()); <span class="comment">// 13</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCSeconds</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-转换为时间戳（毫秒数）"><a href="#5-转换为时间戳（毫秒数）" class="headerlink" title="5. 转换为时间戳（毫秒数）"></a><strong>5. 转换为时间戳（毫秒数）</strong></h2><p>如果需要将日期转换为<strong>时间戳（毫秒）</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="comment">// 结果: 1711026000000</span></span><br></pre></td></tr></table></figure><p>📌 <code>getTime()</code> 返回自 1970-01-01 00:00:00 UTC 以来的毫秒数。</p><p>如果需要<strong>秒级时间戳</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(date.<span class="title function_">getTime</span>() / <span class="number">1000</span>));</span><br><span class="line"><span class="comment">// 结果: 1711026000</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-使用-day-js-或-moment-js-进行处理"><a href="#6-使用-day-js-或-moment-js-进行处理" class="headerlink" title="6. 使用 day.js 或 moment.js 进行处理"></a><strong>6. 使用 <code>day.js</code> 或 <code>moment.js</code> 进行处理</strong></h2><p>如果需要更强大的时间处理库，可以使用 <code>day.js</code>（轻量）或 <code>moment.js</code>（较重）。</p><p>📌 <strong>使用 <code>day.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&quot;dayjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr = <span class="string">&quot;2024-03-21T13:00:00&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> formatted = <span class="title function_">dayjs</span>(dateStr).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formatted); <span class="comment">// &quot;2024-03-21 13:00:00&quot;</span></span><br></pre></td></tr></table></figure><p>📌 <strong>使用 <code>moment.js</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&quot;moment&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dateStr = <span class="string">&quot;2024-03-21T13:00:00&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> formatted = <span class="title function_">moment</span>(dateStr).<span class="title function_">format</span>(<span class="string">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formatted); <span class="comment">// &quot;2024-03-21 13:00:00&quot;</span></span><br></pre></td></tr></table></figure><hr><h2 id="📌-总结"><a href="#📌-总结" class="headerlink" title="📌 总结"></a><strong>📌 总结</strong></h2><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td><strong>解析 ISO 8601 日期</strong></td><td><code>new Date(dateStr)</code></td></tr><tr><td><strong>获取年份</strong></td><td><code>date.getFullYear()</code></td></tr><tr><td><strong>获取月份</strong></td><td><code>date.getMonth() + 1</code>（注意 <code>+1</code>）</td></tr><tr><td><strong>获取日期</strong></td><td><code>date.getDate()</code></td></tr><tr><td><strong>获取时间（小时、分钟、秒）</strong></td><td><code>date.getHours()</code>, <code>date.getMinutes()</code>, <code>date.getSeconds()</code></td></tr><tr><td><strong>格式化 <code>YYYY-MM-DD HH:mm:ss</code></strong></td><td>自定义 <code>padStart()</code> 方法 &#x2F; <code>day.js</code> &#x2F; <code>moment.js</code></td></tr><tr><td><strong>转换 UTC 时间</strong></td><td><code>date.toISOString()</code></td></tr><tr><td><strong>获取时间戳（毫秒）</strong></td><td><code>date.getTime()</code></td></tr><tr><td><strong>获取时间戳（秒）</strong></td><td><code>Math.floor(date.getTime() / 1000)</code></td></tr></tbody></table><p>如果只是简单处理，**<code>Date</code> 内置方法就够用**，如果需要更强大的时间操作（时区转换、相对时间等），推荐 <code>day.js</code>。</p><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>是的，**<code>sort()</code> 方法会修改原数组<strong>，它是</strong>原地排序<strong>（</strong>in-place sorting**），不会创建新数组。</p><hr><h2 id="1-sort-修改原数组"><a href="#1-sort-修改原数组" class="headerlink" title="1. sort() 修改原数组"></a><strong>1. <code>sort()</code> 修改原数组</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 升序排序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="comment">// 结果: [1, 1, 3, 4, 5, 9] （原数组被修改）</span></span><br></pre></td></tr></table></figure><p>⚠️ <strong>注意：<code>sort()</code> 不会返回新数组，而是修改 <code>arr</code> 本身！</strong></p><hr><h2 id="2-如何避免-sort-修改原数组？"><a href="#2-如何避免-sort-修改原数组？" class="headerlink" title="2. 如何避免 sort() 修改原数组？"></a><strong>2. 如何避免 <code>sort()</code> 修改原数组？</strong></h2><p>如果想要排序但<strong>不修改原数组</strong>，可以先<strong>创建副本</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> sortedArr = [...arr].<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 创建副本再排序</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [3, 1, 4, 1, 5, 9] （原数组不变）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedArr); <span class="comment">// [1, 1, 3, 4, 5, 9] （新数组已排序）</span></span><br></pre></td></tr></table></figure><p>📌 <strong>方法解析</strong></p><ul><li><code>[...]</code> <strong>扩展运算符</strong> 复制数组，避免 <code>sort()</code> 修改原数组。</li><li><code>sort()</code> 只作用于副本 <code>sortedArr</code>，不会影响 <code>arr</code>。</li></ul><hr><h2 id="3-使用-toSorted-ES2023"><a href="#3-使用-toSorted-ES2023" class="headerlink" title="3. 使用 toSorted() (ES2023+)"></a><strong>3. 使用 <code>toSorted()</code> (ES2023+)</strong></h2><p>在 <strong>ES2023+</strong> 中，JavaScript 提供了 <code>toSorted()</code> 方法，它不会修改原数组，而是返回<strong>排序后的新数组</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> sortedArr = arr.<span class="title function_">toSorted</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); <span class="comment">// 创建新数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [3, 1, 4, 1, 5, 9] （原数组不变）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sortedArr); <span class="comment">// [1, 1, 3, 4, 5, 9] （新数组已排序）</span></span><br></pre></td></tr></table></figure><p><strong>🚀 <code>toSorted()</code> 的优点</strong></p><ul><li><strong>不会修改原数组</strong></li><li><strong>代码更简洁</strong>（不需要 <code>[...]</code> 复制数组）</li></ul><p>但 <code>toSorted()</code> <strong>目前只在最新的浏览器支持</strong>，如果你的项目需要兼容旧版浏览器，仍然需要用 <code>sort()</code> + <code>[...]</code>。</p><hr><h2 id="📌-总结-1"><a href="#📌-总结-1" class="headerlink" title="📌 总结"></a><strong>📌 总结</strong></h2><table><thead><tr><th>方法</th><th>是否修改原数组</th><th>适用场景</th></tr></thead><tbody><tr><td><code>arr.sort()</code></td><td>✅ 修改原数组</td><td>直接对原数组排序</td></tr><tr><td><code>[...arr].sort()</code></td><td>❌ 不修改原数组</td><td>需要排序但保留原数组</td></tr><tr><td><code>arr.toSorted()</code> (ES2023+)</td><td>❌ 不修改原数组</td><td>更简洁的方法，但仅支持现代浏览器</td></tr></tbody></table><p>如果你需要<strong>排序但不影响原数组</strong>，建议用 <code>[...arr].sort()</code> 或 <code>toSorted()</code>（如果环境支持）。</p><h1 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h1><p>正则表达式（Regular Expression）在 JavaScript 中是一个强大的工具，用于字符串的匹配、搜索、替换和验证。以下是 JavaScript 中正则表达式的详细用法，包括捕获组（Capturing Groups）的应用。</p><hr><h3 id="一、正则表达式的基本语法"><a href="#一、正则表达式的基本语法" class="headerlink" title="一、正则表达式的基本语法"></a>一、正则表达式的基本语法</h3><p>在 JavaScript 中，正则表达式可以通过两种方式创建：</p><ol><li><strong>字面量形式</strong>：<code>/pattern/modifiers</code></li><li><strong>构造函数形式</strong>：<code>new RegExp(&quot;pattern&quot;, &quot;modifiers&quot;)</code></li></ol><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字面量形式</span></span><br><span class="line"><span class="keyword">const</span> regex1 = <span class="regexp">/abc/gi</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数形式</span></span><br><span class="line"><span class="keyword">const</span> regex2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;gi&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="二、正则表达式的常用方法"><a href="#二、正则表达式的常用方法" class="headerlink" title="二、正则表达式的常用方法"></a>二、正则表达式的常用方法</h3><h4 id="1-test-：测试字符串是否匹配"><a href="#1-test-：测试字符串是否匹配" class="headerlink" title="1. test()：测试字符串是否匹配"></a>1. <code>test()</code>：测试字符串是否匹配</h4><p>返回布尔值，表示是否找到匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/world/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">test</span>(str)); <span class="comment">// true（i 表示不区分大小写）</span></span><br></pre></td></tr></table></figure><h4 id="2-exec-：执行搜索，返回匹配结果"><a href="#2-exec-：执行搜索，返回匹配结果" class="headerlink" title="2. exec()：执行搜索，返回匹配结果"></a>2. <code>exec()</code>：执行搜索，返回匹配结果</h4><p>返回一个数组（包含匹配信息）或 <code>null</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &quot;2023-10-25&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;2023&quot;, &quot;10&quot;, &quot;25&quot;,</span></span><br><span class="line"><span class="comment">//   index: 0,</span></span><br><span class="line"><span class="comment">//   input: &quot;2023-10-25&quot;,</span></span><br><span class="line"><span class="comment">//   groups: undefined</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h4 id="3-match-：字符串方法，返回匹配结果"><a href="#3-match-：字符串方法，返回匹配结果" class="headerlink" title="3. match()：字符串方法，返回匹配结果"></a>3. <code>match()</code>：字符串方法，返回匹配结果</h4><p>类似于 <code>exec()</code>，但属于字符串的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出同上</span></span><br></pre></td></tr></table></figure><h4 id="4-replace-：替换匹配内容"><a href="#4-replace-：替换匹配内容" class="headerlink" title="4. replace()：替换匹配内容"></a>4. <code>replace()</code>：替换匹配内容</h4><p>替换字符串中匹配的部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> newStr = str.<span class="title function_">replace</span>(regex, <span class="string">&quot;$2/$3/$1&quot;</span>); <span class="comment">// &quot;10/25/2023&quot;</span></span><br></pre></td></tr></table></figure><h4 id="5-search-：返回匹配的起始位置"><a href="#5-search-：返回匹配的起始位置" class="headerlink" title="5. search()：返回匹配的起始位置"></a>5. <code>search()</code>：返回匹配的起始位置</h4><p>返回匹配项的索引，未找到返回 <code>-1</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/world/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">search</span>(regex)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><hr><h3 id="三、捕获组（Capturing-Groups）"><a href="#三、捕获组（Capturing-Groups）" class="headerlink" title="三、捕获组（Capturing Groups）"></a>三、捕获组（Capturing Groups）</h3><p>捕获组是正则表达式中用括号 <code>()</code> 包裹的部分，用于从匹配的字符串中提取特定部分。</p><h4 id="1-基本捕获组"><a href="#1-基本捕获组" class="headerlink" title="1. 基本捕获组"></a>1. 基本捕获组</h4><p>通过索引访问捕获组，索引从 <code>1</code> 开始。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;John Doe, 30&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\w+)\s(\w+),\s(\d+)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]); <span class="comment">// &quot;John Doe, 30&quot;（完整匹配）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]); <span class="comment">// &quot;John&quot;（第一个捕获组）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">2</span>]); <span class="comment">// &quot;Doe&quot;（第二个捕获组）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">3</span>]); <span class="comment">// &quot;30&quot;（第三个捕获组）</span></span><br></pre></td></tr></table></figure><h4 id="2-命名捕获组（ES2018-）"><a href="#2-命名捕获组（ES2018-）" class="headerlink" title="2. 命名捕获组（ES2018+）"></a>2. 命名捕获组（ES2018+）</h4><p>通过 <code>?&lt;name&gt;</code> 语法为捕获组命名，通过 <code>groups</code> 属性访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">year</span>); <span class="comment">// &quot;2023&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">month</span>); <span class="comment">// &quot;10&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">groups</span>.<span class="property">day</span>); <span class="comment">// &quot;25&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-非捕获组"><a href="#3-非捕获组" class="headerlink" title="3. 非捕获组"></a>3. 非捕获组</h4><p>使用 <code>?:</code> 表示非捕获组，匹配但不捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;foo123bar&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/foo(?:\d+)(bar)/</span>;</span><br><span class="line"><span class="keyword">const</span> result = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">0</span>]); <span class="comment">// &quot;foo123bar&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]); <span class="comment">// &quot;bar&quot;（仅捕获最后一个组）</span></span><br></pre></td></tr></table></figure><hr><h3 id="四、捕获组的实际应用"><a href="#四、捕获组的实际应用" class="headerlink" title="四、捕获组的实际应用"></a>四、捕获组的实际应用</h3><h4 id="1-提取日期中的年月日"><a href="#1-提取日期中的年月日" class="headerlink" title="1. 提取日期中的年月日"></a>1. 提取日期中的年月日</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">const</span> [, year, month, day] = regex.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(year, month, day); <span class="comment">// &quot;2023&quot; &quot;10&quot; &quot;25&quot;</span></span><br></pre></td></tr></table></figure><h4 id="2-替换日期格式"><a href="#2-替换日期格式" class="headerlink" title="2. 替换日期格式"></a>2. 替换日期格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;2023-10-25&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> newStr = str.<span class="title function_">replace</span>(<span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>, <span class="string">&quot;$2/$3/$1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newStr); <span class="comment">// &quot;10/25/2023&quot;</span></span><br></pre></td></tr></table></figure><h4 id="3-解析-URL-参数"><a href="#3-解析-URL-参数" class="headerlink" title="3. 解析 URL 参数"></a>3. 解析 URL 参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;https://example.com?name=John&amp;age=30&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/(\w+)=(\w+)/g</span>;</span><br><span class="line"><span class="keyword">const</span> params = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> match;</span><br><span class="line"><span class="keyword">while</span> ((match = regex.<span class="title function_">exec</span>(url)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">  params[match[<span class="number">1</span>]] = match[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(params); <span class="comment">// &#123; name: &quot;John&quot;, age: &quot;30&quot; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-动态替换模板字符串"><a href="#4-动态替换模板字符串" class="headerlink" title="4. 动态替换模板字符串"></a>4. 动态替换模板字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="string">&quot;Hello, &#123;name&#125;! You are &#123;age&#125; years old.&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = template.<span class="title function_">replace</span>(<span class="regexp">/\&#123;(\w+)\&#125;/g</span>, <span class="function">(<span class="params">match, key</span>) =&gt;</span> data[key]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;Hello, John! You are 30 years old.&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="五、常见问题与技巧"><a href="#五、常见问题与技巧" class="headerlink" title="五、常见问题与技巧"></a>五、常见问题与技巧</h3><h4 id="1-贪婪匹配-vs-非贪婪匹配"><a href="#1-贪婪匹配-vs-非贪婪匹配" class="headerlink" title="1. 贪婪匹配 vs 非贪婪匹配"></a>1. 贪婪匹配 vs 非贪婪匹配</h4><ul><li><p><strong>贪婪匹配</strong>：默认模式，尽可能匹配更长的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;foo123bar&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/foo(\d+)bar/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">exec</span>(str)[<span class="number">1</span>]); <span class="comment">// &quot;123&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>非贪婪匹配</strong>：使用 <code>?</code>，尽可能匹配更短的字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;foo123bar&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/foo(\d+?)bar/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(regex.<span class="title function_">exec</span>(str)[<span class="number">1</span>]); <span class="comment">// &quot;1&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-捕获组的性能"><a href="#2-捕获组的性能" class="headerlink" title="2. 捕获组的性能"></a>2. 捕获组的性能</h4><p>避免在复杂的正则表达式中使用过多捕获组，可能会影响性能。</p><hr><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><ul><li><strong>基础用法</strong>：<code>test()</code>、<code>exec()</code>、<code>match()</code>、<code>replace()</code>。</li><li><strong>捕获组</strong>：通过 <code>()</code> 提取匹配内容，支持命名捕获组 <code>(?&lt;name&gt;)</code>。</li><li><strong>应用场景</strong>：日期解析、URL 参数提取、模板替换等。</li><li><strong>注意事项</strong>：贪婪匹配与非贪婪匹配的区别，性能优化。</li></ul><p>通过灵活使用正则表达式和捕获组，可以高效处理复杂的字符串操作。</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>使用原生的 Ajax 可以通过 JavaScript 来实现，以下是一个简单的示例，展示了如何使用原生 JavaScript 发起一个 Ajax 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 XMLHttpRequest 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求，包括请求方法、URL 以及是否异步</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.example.com/data&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听请求状态变化</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="title class_">XMLHttpRequest</span>.<span class="property">DONE</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// 请求成功，处理返回的数据</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 请求失败，处理错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求失败：&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ol><li>创建了一个 <code>XMLHttpRequest</code> 对象，它是处理 Ajax 请求的核心。</li><li>使用 <code>xhr.open()</code> 方法配置了请求的方法（GET、POST 等）、URL 和是否使用异步（true 表示异步）。</li><li>通过监听 <code>xhr.onreadystatechange</code> 事件，可以处理请求状态的变化。当 <code>readyState</code> 变为 <code>XMLHttpRequest.DONE</code> 时，表示请求完成。</li><li>在请求完成时，可以检查 <code>xhr.status</code> 来确定请求是否成功（状态码 200 表示成功），然后处理返回的数据（<code>xhr.responseText</code>）或者处理错误情况。</li></ol><p>这是一个基本的 Ajax 请求示例，可以根据具体需求和情境进行进一步的定制和扩展。</p><h1 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h1><p>Node.js 的 <code>fs</code> 模块是处理文件系统操作的核心模块，它提供了许多方法来进行文件的读取、写入、删除、重命名、监控等操作。以下是 <code>fs</code> 模块的详细总结，涵盖了常用方法和适用场景。</p><hr><h3 id="1-文件读取"><a href="#1-文件读取" class="headerlink" title="1. 文件读取"></a>1. <strong>文件读取</strong></h3><h4 id="异步读取文件：fs-readFile-path-encoding-callback"><a href="#异步读取文件：fs-readFile-path-encoding-callback" class="headerlink" title="异步读取文件：fs.readFile(path, encoding, callback)"></a>异步读取文件：<code>fs.readFile(path, encoding, callback)</code></h4><p>异步地读取文件内容，<code>callback</code> 回调函数会在文件读取完毕后执行。</p><ul><li><p>语法</p><p>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p>参数</p><p>：</p><ul><li><p><code>path</code>: 要读取的文件路径。</p></li><li><p><code>encoding</code>: 编码格式（如 <code>&#39;utf8&#39;</code>）。如果不指定，返回 <code>Buffer</code> 类型的数据。</p></li><li><pre><code>callback<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    : 回调函数，接收两个参数：</span><br><span class="line"></span><br><span class="line">    - `err`: 如果有错误，包含错误信息。</span><br><span class="line">    - `data`: 读取到的文件内容。</span><br><span class="line"></span><br><span class="line">- 使用示例</span><br><span class="line"></span><br><span class="line">  ：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  const fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">  fs.readFile(&quot;example.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(&quot;Error:&quot;, err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&quot;File content:&quot;, data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="同步读取文件：fs-readFileSync-path-encoding"><a href="#同步读取文件：fs-readFileSync-path-encoding" class="headerlink" title="同步读取文件：fs.readFileSync(path, encoding)"></a>同步读取文件：<code>fs.readFileSync(path, encoding)</code></h4><p>同步地读取文件内容，直到文件读取完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(path, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要读取的文件路径。</li><li><code>encoding</code>: 编码格式（如 <code>&#39;utf8&#39;</code>），如果不指定，返回 <code>Buffer</code> 类型的数据。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File content:&quot;</span>, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="返回类型："><a href="#返回类型：" class="headerlink" title="返回类型："></a>返回类型：</h4><ul><li>如果指定编码（如 <code>&#39;utf8&#39;</code>），返回的将是一个字符串。</li><li>如果没有指定编码，则返回的是 <code>Buffer</code> 对象。</li></ul><hr><h3 id="2-文件写入"><a href="#2-文件写入" class="headerlink" title="2. 文件写入"></a>2. <strong>文件写入</strong></h3><h4 id="异步写入文件：fs-writeFile-path-data-encoding-callback"><a href="#异步写入文件：fs-writeFile-path-data-encoding-callback" class="headerlink" title="异步写入文件：fs.writeFile(path, data, encoding, callback)"></a>异步写入文件：<code>fs.writeFile(path, data, encoding, callback)</code></h4><p>异步地将数据写入文件。如果文件已存在，则会覆盖原文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path, data, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要写入的数据，可以是字符串或 <code>Buffer</code>。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;Hello, Node.js!&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error writing file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="同步写入文件：fs-writeFileSync-path-data-encoding"><a href="#同步写入文件：fs-writeFileSync-path-data-encoding" class="headerlink" title="同步写入文件：fs.writeFileSync(path, data, encoding)"></a>同步写入文件：<code>fs.writeFileSync(path, data, encoding)</code></h4><p>同步地将数据写入文件，直到文件写入完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFileSync</span>(path, data, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要写入的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;Hello, Node.js!&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written successfully&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error writing file:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-追加文件内容"><a href="#3-追加文件内容" class="headerlink" title="3. 追加文件内容"></a>3. <strong>追加文件内容</strong></h3><h4 id="异步追加：fs-appendFile-path-data-encoding-callback"><a href="#异步追加：fs-appendFile-path-data-encoding-callback" class="headerlink" title="异步追加：fs.appendFile(path, data, encoding, callback)"></a>异步追加：<code>fs.appendFile(path, data, encoding, callback)</code></h4><p>将数据追加到文件末尾。如果文件不存在，则会创建新文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(path, data, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要追加的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;\nHello again!&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error appending to file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Content appended successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="同步追加：fs-appendFileSync-path-data-encoding"><a href="#同步追加：fs-appendFileSync-path-data-encoding" class="headerlink" title="同步追加：fs.appendFileSync(path, data, encoding)"></a>同步追加：<code>fs.appendFileSync(path, data, encoding)</code></h4><p>同步地将数据追加到文件末尾，直到文件写入完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFileSync</span>(path, data, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要追加的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">appendFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;\nHello again!&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Content appended successfully&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error appending to file:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-文件和目录检查"><a href="#4-文件和目录检查" class="headerlink" title="4. 文件和目录检查"></a>4. <strong>文件和目录检查</strong></h3><h4 id="检查文件是否存在：fs-exists-path-callback"><a href="#检查文件是否存在：fs-exists-path-callback" class="headerlink" title="检查文件是否存在：fs.exists(path, callback)"></a>检查文件是否存在：<code>fs.exists(path, callback)</code></h4><p>检查指定路径的文件或目录是否存在，返回一个布尔值。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">exists</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要检查的路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>exists</code>，布尔值，表示文件或目录是否存在。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">exists</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">exists</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File exists&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File does not exist&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="检查文件状态：fs-stat-path-callback"><a href="#检查文件状态：fs-stat-path-callback" class="headerlink" title="检查文件状态：fs.stat(path, callback)"></a>检查文件状态：<code>fs.stat(path, callback)</code></h4><p>获取文件或目录的状态信息，包括文件大小、修改时间等。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><p><code>path</code>: 要检查的文件路径。</p></li><li><pre><code>callback<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    : 回调函数，接收两个参数：</span><br><span class="line"></span><br><span class="line">    - `err`: 如果有错误，包含错误信息。</span><br><span class="line">    - `stats`: 包含文件信息的 `fs.Stats` 对象。</span><br><span class="line"></span><br><span class="line">- **使用示例**：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  const fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">  fs.stat(&quot;example.txt&quot;, (err, stats) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(&quot;Error checking file:&quot;, err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&quot;File stats:&quot;, stats);</span><br><span class="line">      console.log(&quot;Is directory?&quot;, stats.isDirectory());</span><br><span class="line">      console.log(&quot;Is file?&quot;, stats.isFile());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5. 删除文件"></a>5. <strong>删除文件</strong></h3><h4 id="删除文件：fs-unlink-path-callback"><a href="#删除文件：fs-unlink-path-callback" class="headerlink" title="删除文件：fs.unlink(path, callback)"></a>删除文件：<code>fs.unlink(path, callback)</code></h4><p>删除指定路径的文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要删除的文件路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error deleting file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File deleted successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="6-创建和删除目录"><a href="#6-创建和删除目录" class="headerlink" title="6. 创建和删除目录"></a>6. <strong>创建和删除目录</strong></h3><h4 id="创建目录：fs-mkdir-path-callback"><a href="#创建目录：fs-mkdir-path-callback" class="headerlink" title="创建目录：fs.mkdir(path, callback)"></a>创建目录：<code>fs.mkdir(path, callback)</code></h4><p>创建一个新目录。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要创建的目录路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;newdir&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error creating directory:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory created successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除目录：fs-rmdir-path-callback"><a href="#删除目录：fs-rmdir-path-callback" class="headerlink" title="删除目录：fs.rmdir(path, callback)"></a>删除目录：<code>fs.rmdir(path, callback)</code></h4><p>删除一个空目录。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要删除的目录路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&quot;newdir&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error removing directory:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory removed successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>异步与同步方法</strong>：<code>fs</code> 模块提供了异步和同步的方法，通常推荐使用异步方法（避免阻塞事件循环），同步方法用于简单场景或者脚本执行。</li><li><strong>文件和目录操作</strong>：文件的读取、写入、删除、检查、目录的创建与删除等是最常用的操作，基于这些基本功能可以构建文件管理系统、日志记录等功能。</li><li><strong>错误处理</strong>：所有的异步方法都提供了回调函数来处理错误，确保在文件操作中捕获异常并做出适当反应。</li></ul><h1 id="fs-1"><a href="#fs-1" class="headerlink" title="fs"></a>fs</h1><p>Node.js 的 <code>fs</code> 模块是处理文件系统操作的核心模块，它提供了许多方法来进行文件的读取、写入、删除、重命名、监控等操作。以下是 <code>fs</code> 模块的详细总结，涵盖了常用方法和适用场景。</p><hr><h3 id="1-文件读取-1"><a href="#1-文件读取-1" class="headerlink" title="1. 文件读取"></a>1. <strong>文件读取</strong></h3><h4 id="异步读取文件：fs-readFile-path-encoding-callback-1"><a href="#异步读取文件：fs-readFile-path-encoding-callback-1" class="headerlink" title="异步读取文件：fs.readFile(path, encoding, callback)"></a>异步读取文件：<code>fs.readFile(path, encoding, callback)</code></h4><p>异步地读取文件内容，<code>callback</code> 回调函数会在文件读取完毕后执行。</p><ul><li><p>语法</p><p>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p>参数</p><p>：</p><ul><li><p><code>path</code>: 要读取的文件路径。</p></li><li><p><code>encoding</code>: 编码格式（如 <code>&#39;utf8&#39;</code>）。如果不指定，返回 <code>Buffer</code> 类型的数据。</p></li><li><pre><code>callback<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    : 回调函数，接收两个参数：</span><br><span class="line"></span><br><span class="line">    - `err`: 如果有错误，包含错误信息。</span><br><span class="line">    - `data`: 读取到的文件内容。</span><br><span class="line"></span><br><span class="line">- 使用示例</span><br><span class="line"></span><br><span class="line">  ：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  const fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">  fs.readFile(&quot;example.txt&quot;, &quot;utf8&quot;, (err, data) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(&quot;Error:&quot;, err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&quot;File content:&quot;, data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h4 id="同步读取文件：fs-readFileSync-path-encoding-1"><a href="#同步读取文件：fs-readFileSync-path-encoding-1" class="headerlink" title="同步读取文件：fs.readFileSync(path, encoding)"></a>同步读取文件：<code>fs.readFileSync(path, encoding)</code></h4><p>同步地读取文件内容，直到文件读取完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(path, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要读取的文件路径。</li><li><code>encoding</code>: 编码格式（如 <code>&#39;utf8&#39;</code>），如果不指定，返回 <code>Buffer</code> 类型的数据。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File content:&quot;</span>, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="返回类型：-1"><a href="#返回类型：-1" class="headerlink" title="返回类型："></a>返回类型：</h4><ul><li>如果指定编码（如 <code>&#39;utf8&#39;</code>），返回的将是一个字符串。</li><li>如果没有指定编码，则返回的是 <code>Buffer</code> 对象。</li></ul><hr><h3 id="2-文件写入-1"><a href="#2-文件写入-1" class="headerlink" title="2. 文件写入"></a>2. <strong>文件写入</strong></h3><h4 id="异步写入文件：fs-writeFile-path-data-encoding-callback-1"><a href="#异步写入文件：fs-writeFile-path-data-encoding-callback-1" class="headerlink" title="异步写入文件：fs.writeFile(path, data, encoding, callback)"></a>异步写入文件：<code>fs.writeFile(path, data, encoding, callback)</code></h4><p>异步地将数据写入文件。如果文件已存在，则会覆盖原文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(path, data, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要写入的数据，可以是字符串或 <code>Buffer</code>。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;Hello, Node.js!&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error writing file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="同步写入文件：fs-writeFileSync-path-data-encoding-1"><a href="#同步写入文件：fs-writeFileSync-path-data-encoding-1" class="headerlink" title="同步写入文件：fs.writeFileSync(path, data, encoding)"></a>同步写入文件：<code>fs.writeFileSync(path, data, encoding)</code></h4><p>同步地将数据写入文件，直到文件写入完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFileSync</span>(path, data, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要写入的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">writeFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;Hello, Node.js!&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File written successfully&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error writing file:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="3-追加文件内容-1"><a href="#3-追加文件内容-1" class="headerlink" title="3. 追加文件内容"></a>3. <strong>追加文件内容</strong></h3><h4 id="异步追加：fs-appendFile-path-data-encoding-callback-1"><a href="#异步追加：fs-appendFile-path-data-encoding-callback-1" class="headerlink" title="异步追加：fs.appendFile(path, data, encoding, callback)"></a>异步追加：<code>fs.appendFile(path, data, encoding, callback)</code></h4><p>将数据追加到文件末尾。如果文件不存在，则会创建新文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(path, data, encoding, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要追加的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;\nHello again!&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error appending to file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Content appended successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="同步追加：fs-appendFileSync-path-data-encoding-1"><a href="#同步追加：fs-appendFileSync-path-data-encoding-1" class="headerlink" title="同步追加：fs.appendFileSync(path, data, encoding)"></a>同步追加：<code>fs.appendFileSync(path, data, encoding)</code></h4><p>同步地将数据追加到文件末尾，直到文件写入完成，程序才会继续执行。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFileSync</span>(path, data, encoding);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要写入的文件路径。</li><li><code>data</code>: 要追加的数据。</li><li><code>encoding</code>: 编码格式（可选，默认为 <code>&#39;utf8&#39;</code>）。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.<span class="title function_">appendFileSync</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;\nHello again!&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Content appended successfully&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error appending to file:&quot;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-文件和目录检查-1"><a href="#4-文件和目录检查-1" class="headerlink" title="4. 文件和目录检查"></a>4. <strong>文件和目录检查</strong></h3><h4 id="检查文件是否存在：fs-exists-path-callback-1"><a href="#检查文件是否存在：fs-exists-path-callback-1" class="headerlink" title="检查文件是否存在：fs.exists(path, callback)"></a>检查文件是否存在：<code>fs.exists(path, callback)</code></h4><p>检查指定路径的文件或目录是否存在，返回一个布尔值。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">exists</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要检查的路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>exists</code>，布尔值，表示文件或目录是否存在。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">exists</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">exists</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (exists) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File exists&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File does not exist&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="检查文件状态：fs-stat-path-callback-1"><a href="#检查文件状态：fs-stat-path-callback-1" class="headerlink" title="检查文件状态：fs.stat(path, callback)"></a>检查文件状态：<code>fs.stat(path, callback)</code></h4><p>获取文件或目录的状态信息，包括文件大小、修改时间等。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><p><code>path</code>: 要检查的文件路径。</p></li><li><pre><code>callback<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    : 回调函数，接收两个参数：</span><br><span class="line"></span><br><span class="line">    - `err`: 如果有错误，包含错误信息。</span><br><span class="line">    - `stats`: 包含文件信息的 `fs.Stats` 对象。</span><br><span class="line"></span><br><span class="line">- **使用示例**：</span><br><span class="line"></span><br><span class="line">  ```js</span><br><span class="line">  const fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">  fs.stat(&quot;example.txt&quot;, (err, stats) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      console.log(&quot;Error checking file:&quot;, err);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&quot;File stats:&quot;, stats);</span><br><span class="line">      console.log(&quot;Is directory?&quot;, stats.isDirectory());</span><br><span class="line">      console.log(&quot;Is file?&quot;, stats.isFile());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><hr><h3 id="5-删除文件-1"><a href="#5-删除文件-1" class="headerlink" title="5. 删除文件"></a>5. <strong>删除文件</strong></h3><h4 id="删除文件：fs-unlink-path-callback-1"><a href="#删除文件：fs-unlink-path-callback-1" class="headerlink" title="删除文件：fs.unlink(path, callback)"></a>删除文件：<code>fs.unlink(path, callback)</code></h4><p>删除指定路径的文件。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要删除的文件路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error deleting file:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File deleted successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="6-创建和删除目录-1"><a href="#6-创建和删除目录-1" class="headerlink" title="6. 创建和删除目录"></a>6. <strong>创建和删除目录</strong></h3><h4 id="创建目录：fs-mkdir-path-callback-1"><a href="#创建目录：fs-mkdir-path-callback-1" class="headerlink" title="创建目录：fs.mkdir(path, callback)"></a>创建目录：<code>fs.mkdir(path, callback)</code></h4><p>创建一个新目录。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要创建的目录路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;newdir&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error creating directory:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory created successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="删除目录：fs-rmdir-path-callback-1"><a href="#删除目录：fs-rmdir-path-callback-1" class="headerlink" title="删除目录：fs.rmdir(path, callback)"></a>删除目录：<code>fs.rmdir(path, callback)</code></h4><p>删除一个空目录。</p><ul><li><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path, callback);</span><br></pre></td></tr></table></figure></li><li><p><strong>参数</strong>：</p><ul><li><code>path</code>: 要删除的目录路径。</li><li><code>callback</code>: 回调函数，接收一个参数 <code>err</code>，表示错误信息。</li></ul></li><li><p><strong>使用示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&quot;newdir&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Error removing directory:&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Directory removed successfully&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>异步与同步方法</strong>：<code>fs</code> 模块提供了异步和同步的方法，通常推荐使用异步方法（避免阻塞事件循环），同步方法用于简单场景或者脚本执行。</li><li><strong>文件和目录操作</strong>：文件的读取、写入、删除、检查、目录的创建与删除等是最常用的操作，基于这些基本功能可以构建文件管理系统、日志记录等功能。</li><li><strong>错误处理</strong>：所有的异步方法都提供了回调函数来处理错误，确保在文件操作中捕获异常并做出适当反应。</li></ul><h1 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h1><p><code>path</code> 模块是 Node.js 的核心模块之一，主要用于处理和操作文件路径。它提供了多种方法来处理路径字符串，以保证在不同操作系统（如 Windows、Linux、macOS）上的兼容性。</p><hr><h2 id="1-引入-path-模块"><a href="#1-引入-path-模块" class="headerlink" title="1. 引入 path 模块"></a><strong>1. 引入 <code>path</code> 模块</strong></h2><p><code>path</code> 是 Node.js 内置模块，无需安装，可以直接 <code>require</code> 引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="2-path-常用方法"><a href="#2-path-常用方法" class="headerlink" title="2. path 常用方法"></a><strong>2. <code>path</code> 常用方法</strong></h2><h3 id="1-path-join-paths"><a href="#1-path-join-paths" class="headerlink" title="(1) path.join(...paths)"></a><strong>(1) <code>path.join(...paths)</code></strong></h3><p>将多个路径片段拼接成一个完整的路径，并自动处理路径分隔符（<code>/</code> 或 <code>\</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;documents&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filePath);</span><br><span class="line"><span class="comment">// 在 Windows 上: &#x27;user\documents\file.txt&#x27;</span></span><br><span class="line"><span class="comment">// 在 Linux/macOS 上: &#x27;user/documents/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>构建文件路径</strong>，适用于不同操作系统，自动处理路径分隔符。</li></ul><hr><h3 id="2-path-resolve-paths"><a href="#2-path-resolve-paths" class="headerlink" title="(2) path.resolve(...paths)"></a><strong>(2) <code>path.resolve(...paths)</code></strong></h3><p>返回绝对路径，类似 <code>cd</code> 命令解析路径的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 假设当前目录为 `/home/user`，则输出：</span></span><br><span class="line"><span class="comment">// &#x27;/home/user/user/docs/file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(<span class="string">&quot;/user&quot;</span>, <span class="string">&quot;docs&quot;</span>, <span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 由于 `/user` 是绝对路径，所以结果为 `/user/docs/file.txt`</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>生成绝对路径</strong>，避免路径不明确导致的错误。</li></ul><hr><h3 id="3-path-basename-path-ext"><a href="#3-path-basename-path-ext" class="headerlink" title="(3) path.basename(path, ext?)"></a><strong>(3) <code>path.basename(path, ext?)</code></strong></h3><p>获取路径中的 <strong>文件名</strong>，可选地去掉扩展名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = <span class="string">&quot;/user/documents/file.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(file)); <span class="comment">// &#x27;file.txt&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(file, <span class="string">&quot;.txt&quot;</span>)); <span class="comment">// &#x27;file&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>获取文件名</strong>，比如 <code>file.txt</code> 而不是完整路径。</li></ul><hr><h3 id="4-path-dirname-path"><a href="#4-path-dirname-path" class="headerlink" title="(4) path.dirname(path)"></a><strong>(4) <code>path.dirname(path)</code></strong></h3><p>获取路径中的 <strong>目录名</strong>（不包含文件名）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> file = <span class="string">&quot;/user/documents/file.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(file)); <span class="comment">// &#x27;/user/documents&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>获取文件所在的目录路径</strong>。</li></ul><hr><h3 id="5-path-extname-path"><a href="#5-path-extname-path" class="headerlink" title="(5) path.extname(path)"></a><strong>(5) <code>path.extname(path)</code></strong></h3><p>获取文件的 <strong>扩展名</strong>，包括 <code>.</code> 号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&quot;file.txt&quot;</span>)); <span class="comment">// &#x27;.txt&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&quot;index.html&quot;</span>)); <span class="comment">// &#x27;.html&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(<span class="string">&quot;README&quot;</span>)); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>判断文件类型</strong>，如检查文件是否是 <code>.jpg</code>、<code>.json</code> 等。</li></ul><hr><h3 id="6-path-parse-path"><a href="#6-path-parse-path" class="headerlink" title="(6) path.parse(path)"></a><strong>(6) <code>path.parse(path)</code></strong></h3><p>解析路径，返回一个对象，包含路径的各个部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parsed = path.<span class="title function_">parse</span>(<span class="string">&quot;/user/docs/file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parsed);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  root: &#x27;/&#x27;,       // 根路径</span></span><br><span class="line"><span class="comment">  dir: &#x27;/user/docs&#x27;, // 目录路径</span></span><br><span class="line"><span class="comment">  base: &#x27;file.txt&#x27;, // 文件名（包含扩展名）</span></span><br><span class="line"><span class="comment">  ext: &#x27;.txt&#x27;,      // 文件扩展名</span></span><br><span class="line"><span class="comment">  name: &#x27;file&#x27;      // 文件名（不包含扩展名）</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>提取路径信息</strong>（目录、文件名、扩展名等）。</li></ul><hr><h3 id="7-path-format-pathObject"><a href="#7-path-format-pathObject" class="headerlink" title="(7) path.format(pathObject)"></a><strong>(7) <code>path.format(pathObject)</code></strong></h3><p>与 <code>path.parse()</code> 相反，它将一个路径对象转换回路径字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formatted = path.<span class="title function_">format</span>(&#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="attr">dir</span>: <span class="string">&quot;/user/docs&quot;</span>,</span><br><span class="line">  <span class="attr">base</span>: <span class="string">&quot;file.txt&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(formatted); <span class="comment">// &#x27;/user/docs/file.txt&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>动态拼接路径</strong>。</li></ul><hr><h3 id="8-path-isAbsolute-path"><a href="#8-path-isAbsolute-path" class="headerlink" title="(8) path.isAbsolute(path)"></a><strong>(8) <code>path.isAbsolute(path)</code></strong></h3><p>判断路径是否为 <strong>绝对路径</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">isAbsolute</span>(<span class="string">&quot;/user/docs/file.txt&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">isAbsolute</span>(<span class="string">&quot;user/docs/file.txt&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">isAbsolute</span>(<span class="string">&quot;C:\\user\\docs&quot;</span>)); <span class="comment">// true (Windows)</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>判断路径是否需要转换成绝对路径</strong>。</li></ul><hr><h3 id="9-path-relative-from-to"><a href="#9-path-relative-from-to" class="headerlink" title="(9) path.relative(from, to)"></a><strong>(9) <code>path.relative(from, to)</code></strong></h3><p>计算 <code>from</code> 到 <code>to</code> 之间的相对路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">relative</span>(<span class="string">&quot;/user/docs&quot;</span>, <span class="string">&quot;/user/docs/file.txt&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;file.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">relative</span>(<span class="string">&quot;/user/docs&quot;</span>, <span class="string">&quot;/user/images/photo.jpg&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;../images/photo.jpg&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>构建相对路径</strong>（如从 <code>docs</code> 目录到 <code>images</code> 目录）。</li></ul><hr><h3 id="10-path-normalize-path"><a href="#10-path-normalize-path" class="headerlink" title="(10) path.normalize(path)"></a><strong>(10) <code>path.normalize(path)</code></strong></h3><p>规范化路径，处理 <code>..</code> 和 <code>.</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">normalize</span>(<span class="string">&quot;/user/docs/../images/photo.jpg&quot;</span>));</span><br><span class="line"><span class="comment">// &#x27;/user/images/photo.jpg&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>确保路径正确</strong>，避免 <code>..</code> 和 <code>.</code> 影响路径解析。</li></ul><hr><h3 id="11-path-sep"><a href="#11-path-sep" class="headerlink" title="(11) path.sep"></a><strong>(11) <code>path.sep</code></strong></h3><p>返回当前系统的路径分隔符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);</span><br><span class="line"><span class="comment">// Windows: &#x27;\&#x27;</span></span><br><span class="line"><span class="comment">// Linux/macOS: &#x27;/&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>跨平台路径处理</strong>。</li></ul><hr><h3 id="12-path-delimiter"><a href="#12-path-delimiter" class="headerlink" title="(12) path.delimiter"></a><strong>(12) <code>path.delimiter</code></strong></h3><p>返回环境变量分隔符：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">PATH</span>.<span class="title function_">split</span>(path.<span class="property">delimiter</span>));</span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong></p><ul><li><strong>解析 <code>PATH</code> 变量</strong>（Windows 使用 <code>;</code>，Linux&#x2F;macOS 使用 <code>:</code>）。</li></ul><hr><h2 id="3-path-典型使用场景"><a href="#3-path-典型使用场景" class="headerlink" title="3. path 典型使用场景"></a><strong>3. <code>path</code> 典型使用场景</strong></h2><h3 id="✅-读取当前脚本所在目录"><a href="#✅-读取当前脚本所在目录" class="headerlink" title="✅ 读取当前脚本所在目录"></a><strong>✅ 读取当前脚本所在目录</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scriptDir = __dirname;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;当前脚本所在目录:&quot;</span>, scriptDir);</span><br></pre></td></tr></table></figure><h3 id="✅-获取绝对路径"><a href="#✅-获取绝对路径" class="headerlink" title="✅ 获取绝对路径"></a><strong>✅ 获取绝对路径</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> absolutePath = path.<span class="title function_">resolve</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(absolutePath);</span><br></pre></td></tr></table></figure><h3 id="✅-读取文件扩展名"><a href="#✅-读取文件扩展名" class="headerlink" title="✅ 读取文件扩展名"></a><strong>✅ 读取文件扩展名</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ext = path.<span class="title function_">extname</span>(<span class="string">&quot;data/file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件扩展名:&quot;</span>, ext);</span><br></pre></td></tr></table></figure><h3 id="✅-动态拼接路径"><a href="#✅-动态拼接路径" class="headerlink" title="✅ 动态拼接路径"></a><strong>✅ 动态拼接路径</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fullPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;data&quot;</span>, <span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拼接路径:&quot;</span>, fullPath);</span><br></pre></td></tr></table></figure><h3 id="✅-解析路径"><a href="#✅-解析路径" class="headerlink" title="✅ 解析路径"></a><strong>✅ 解析路径</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileInfo = path.<span class="title function_">parse</span>(<span class="string">&quot;/user/docs/file.txt&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fileInfo.<span class="property">base</span>); <span class="comment">// &#x27;file.txt&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="✅-计算两个路径之间的相对路径"><a href="#✅-计算两个路径之间的相对路径" class="headerlink" title="✅ 计算两个路径之间的相对路径"></a><strong>✅ 计算两个路径之间的相对路径</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> relativePath = path.<span class="title function_">relative</span>(<span class="string">&quot;/user/docs&quot;</span>, <span class="string">&quot;/user/images/photo.jpg&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;相对路径:&quot;</span>, relativePath);</span><br></pre></td></tr></table></figure><hr><h2 id="4-path-vs-fs"><a href="#4-path-vs-fs" class="headerlink" title="4. path vs. fs"></a><strong>4. <code>path</code> vs. <code>fs</code></strong></h2><table><thead><tr><th>功能</th><th><code>path</code> 模块</th><th><code>fs</code> 模块</th></tr></thead><tbody><tr><td>处理路径字符串</td><td>✅</td><td>❌</td></tr><tr><td>读取&#x2F;写入文件</td><td>❌</td><td>✅</td></tr><tr><td>获取文件信息</td><td>❌</td><td>✅</td></tr><tr><td>解析路径</td><td>✅</td><td>❌</td></tr><tr><td>操作文件</td><td>❌</td><td>✅</td></tr></tbody></table><hr><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h2><ul><li><strong><code>path</code> 主要用于路径解析、拼接、转换</strong>，不会对文件系统进行读写操作。</li><li><strong><code>fs</code> 主要用于文件的读写、创建、删除</strong>，与 <code>path</code> 结合使用时非常强大。</li><li><strong><code>path.join()</code> 和 <code>path.resolve()</code> 是最常用的方法</strong>，建议使用 <code>path.join()</code> 处理路径拼接，确保跨平台兼容性。</li></ul><p>如果你在 Node.js 项目中需要处理文件路径，<code>path</code> 模块是必不可少的工具！ 🚀</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p><code>Set</code> 是 JavaScript 中的一种 <strong>集合（Collection）数据结构</strong>，它允许你存储 <strong>唯一值</strong>，即<strong>不允许重复元素</strong>。它的主要作用是去重、集合运算（交集、并集、差集）等。</p><hr><h2 id="1-创建-Set"><a href="#1-创建-Set" class="headerlink" title="1. 创建 Set"></a><strong>1. 创建 <code>Set</code></strong></h2><h3 id="1-空-Set"><a href="#1-空-Set" class="headerlink" title="(1) 空 Set"></a><strong>(1) 空 <code>Set</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>创建一个空的 <code>Set</code>，可以用 <code>.add()</code> 方法添加元素。</p><h3 id="2-从数组创建-Set（自动去重）"><a href="#2-从数组创建-Set（自动去重）" class="headerlink" title="(2) 从数组创建 Set（自动去重）"></a><strong>(2) 从数组创建 <code>Set</code>（自动去重）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure><p><code>Set</code> 会自动去掉重复的 <code>3</code> 和 <code>5</code>。</p><hr><h2 id="2-Set-的基本方法"><a href="#2-Set-的基本方法" class="headerlink" title="2. Set 的基本方法"></a><strong>2. <code>Set</code> 的基本方法</strong></h2><h3 id="1-add-value-添加元素"><a href="#1-add-value-添加元素" class="headerlink" title="(1) .add(value) - 添加元素"></a><strong>(1) <code>.add(value)</code> - 添加元素</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">2</span>); <span class="comment">// 不会添加重复元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>特点</strong>：<code>Set</code> 只能存储 <strong>唯一值</strong>，重复的值会被自动忽略。</p></blockquote><hr><h3 id="2-delete-value-删除元素"><a href="#2-delete-value-删除元素" class="headerlink" title="(2) .delete(value) - 删除元素"></a><strong>(2) <code>.delete(value)</code> - 删除元素</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(1) &#123;1&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>返回值</strong>：如果删除成功，返回 <code>true</code>，否则返回 <code>false</code>。</p></blockquote><hr><h3 id="3-has-value-检查是否存在"><a href="#3-has-value-检查是否存在" class="headerlink" title="(3) .has(value) - 检查是否存在"></a><strong>(3) <code>.has(value)</code> - 检查是否存在</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">3</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>适用于：</strong> 快速查找某个值是否存在，比数组 <code>.includes()</code> 更高效。</p></blockquote><hr><h3 id="4-clear-清空-Set"><a href="#4-clear-清空-Set" class="headerlink" title="(4) .clear() - 清空 Set"></a><strong>(4) <code>.clear()</code> - 清空 <code>Set</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mySet.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>作用</strong>：清空所有元素。</p></blockquote><hr><h3 id="5-size-获取元素个数"><a href="#5-size-获取元素个数" class="headerlink" title="(5) .size - 获取元素个数"></a><strong>(5) <code>.size</code> - 获取元素个数</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="property">size</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><blockquote><p>**区别于数组 <code>length</code>**，<code>Set</code> 使用 <code>.size</code> 而不是 <code>.length</code>。</p></blockquote><hr><h2 id="3-遍历-Set"><a href="#3-遍历-Set" class="headerlink" title="3. 遍历 Set"></a><strong>3. 遍历 <code>Set</code></strong></h2><p><code>Set</code> 是可迭代对象，可以使用 <code>forEach()</code>、<code>for...of</code>、解构等方式遍历。</p><h3 id="1-forEach-遍历"><a href="#1-forEach-遍历" class="headerlink" title="(1) forEach() 遍历"></a><strong>(1) <code>forEach()</code> 遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]);</span><br><span class="line">mySet.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value));</span><br></pre></td></tr></table></figure><h3 id="2-for-of-遍历"><a href="#2-for-of-遍历" class="headerlink" title="(2) for...of 遍历"></a><strong>(2) <code>for...of</code> 遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用-Array-from-转数组"><a href="#3-使用-Array-from-转数组" class="headerlink" title="(3) 使用 Array.from() 转数组"></a><strong>(3) 使用 <code>Array.from()</code> 转数组</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArray); <span class="comment">// [&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;cherry&#x27;]</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-Set-与数组的转换"><a href="#4-Set-与数组的转换" class="headerlink" title="4. Set 与数组的转换"></a><strong>4. <code>Set</code> 与数组的转换</strong></h2><h3 id="1-Set-→-数组"><a href="#1-Set-→-数组" class="headerlink" title="(1) Set → 数组"></a><strong>(1) <code>Set</code> → 数组</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> myArray = [...mySet];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArray); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h3 id="2-数组去重"><a href="#2-数组去重" class="headerlink" title="(2) 数组去重"></a><strong>(2) 数组去重</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> uniqueNumbers = [...<span class="keyword">new</span> <span class="title class_">Set</span>(numbers)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueNumbers); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="3-数组-→-Set"><a href="#3-数组-→-Set" class="headerlink" title="(3) 数组 → Set"></a><strong>(3) 数组 → <code>Set</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uniqueSet = <span class="keyword">new</span> <span class="title class_">Set</span>(numbers);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uniqueSet); <span class="comment">// Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="5-Set-进行集合运算"><a href="#5-Set-进行集合运算" class="headerlink" title="5. Set 进行集合运算"></a><strong>5. <code>Set</code> 进行集合运算</strong></h2><h3 id="1-并集（Set-合并）"><a href="#1-并集（Set-合并）" class="headerlink" title="(1) 并集（Set 合并）"></a><strong>(1) 并集（<code>Set</code> 合并）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setA = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">const</span> setB = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unionSet = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA, ...setB]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unionSet); <span class="comment">// Set(5) &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-交集（获取共有的值）"><a href="#2-交集（获取共有的值）" class="headerlink" title="(2) 交集（获取共有的值）"></a><strong>(2) 交集（获取共有的值）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersectionSet = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> setB.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intersectionSet); <span class="comment">// Set(1) &#123;3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-差集（获取-A-有但-B-没有的值）"><a href="#3-差集（获取-A-有但-B-没有的值）" class="headerlink" title="(3) 差集（获取 A 有但 B 没有的值）"></a><strong>(3) 差集（获取 A 有但 B 没有的值）</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> differenceSet = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> !setB.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(differenceSet); <span class="comment">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="6-Set-适用场景"><a href="#6-Set-适用场景" class="headerlink" title="6. Set 适用场景"></a><strong>6. <code>Set</code> 适用场景</strong></h2><table><thead><tr><th>需求</th><th><strong>推荐用 <code>Set</code> 还是数组？</strong></th><th><strong>理由</strong></th></tr></thead><tbody><tr><td><strong>数组去重</strong></td><td><code>Set</code></td><td><code>Set</code> 自动去重，代码简洁高效</td></tr><tr><td><strong>快速查找值</strong></td><td><code>Set</code></td><td><code>.has(value)</code> 速度比 <code>.includes()</code> 快</td></tr><tr><td><strong>存储唯一值集合</strong></td><td><code>Set</code></td><td>例如存储用户 ID、唯一标识符等</td></tr><tr><td><strong>需要索引查找</strong></td><td><strong>数组</strong></td><td><code>Set</code> 没有索引，只能用迭代遍历</td></tr></tbody></table><hr><h2 id="7-总结-1"><a href="#7-总结-1" class="headerlink" title="7. 总结"></a><strong>7. 总结</strong></h2><p>✅ <code>Set</code> 的主要特点：</p><ol><li><strong>不会存储重复值</strong>（自动去重）。</li><li><strong>可以快速判断某个值是否存在</strong>（比 <code>Array.includes()</code> 更快）。</li><li><strong>支持遍历</strong>（<code>forEach</code>、<code>for...of</code>）。</li><li><strong>适用于数组去重、集合运算</strong>（并集、交集、差集）。</li><li><strong>不能通过索引访问元素</strong>（不像数组 <code>arr[0]</code> 这样操作）。</li></ol><p>✅ <strong>常见用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uniqueValues = [...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>])]; <span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">const</span> hasValue = mySet.<span class="title function_">has</span>(<span class="number">3</span>); <span class="comment">// 快速查找值</span></span><br><span class="line"><span class="keyword">const</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA, ...setB]); <span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">const</span> intersection = <span class="keyword">new</span> <span class="title class_">Set</span>([...setA].<span class="title function_">filter</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> setB.<span class="title function_">has</span>(x))); <span class="comment">// 交集</span></span><br></pre></td></tr></table></figure><p>💡 <strong>适用于数据集合管理，尤其是去重、查找和集合运算！</strong> 🚀</p><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h3 id="Map-在-JavaScript-中的使用方法详解"><a href="#Map-在-JavaScript-中的使用方法详解" class="headerlink" title="Map 在 JavaScript 中的使用方法详解"></a><strong><code>Map</code> 在 JavaScript 中的使用方法详解</strong></h3><p><code>Map</code> 是 JavaScript 的 <strong>键值对（key-value）存储数据结构</strong>，类似于对象 <code>&#123;&#125;</code>，但提供了更多的特性，如 <strong>键可以是任意类型</strong>、<strong>元素有序</strong>、<strong>获取性能更好</strong> 等。</p><hr><h2 id="1-创建-Map"><a href="#1-创建-Map" class="headerlink" title="1. 创建 Map"></a><strong>1. 创建 <code>Map</code></strong></h2><h3 id="1-创建空-Map"><a href="#1-创建空-Map" class="headerlink" title="(1) 创建空 Map"></a><strong>(1) 创建空 <code>Map</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap); <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个空的 <code>Map</code>，可以使用 <code>.set()</code> 方法添加键值对。</p></blockquote><h3 id="2-直接初始化-Map"><a href="#2-直接初始化-Map" class="headerlink" title="(2) 直接初始化 Map"></a><strong>(2) 直接初始化 <code>Map</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Tom&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;age&quot;</span>, <span class="number">25</span>],</span><br><span class="line">  [<span class="string">&quot;job&quot;</span>, <span class="string">&quot;developer&quot;</span>],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"><span class="comment">// Map(3) &#123; &#x27;name&#x27; =&gt; &#x27;Tom&#x27;, &#x27;age&#x27; =&gt; 25, &#x27;job&#x27; =&gt; &#x27;developer&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于</strong>：快速创建 <code>Map</code> 并初始化键值对。</p><hr><h2 id="2-Map-的基本方法"><a href="#2-Map-的基本方法" class="headerlink" title="2. Map 的基本方法"></a><strong>2. <code>Map</code> 的基本方法</strong></h2><h3 id="1-set-key-value-添加或更新键值对"><a href="#1-set-key-value-添加或更新键值对" class="headerlink" title="(1) .set(key, value) - 添加或更新键值对"></a><strong>(1) <code>.set(key, value)</code> - 添加或更新键值对</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">myMap.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"><span class="comment">// Map(2) &#123; &#x27;name&#x27; =&gt; &#x27;Alice&#x27;, &#x27;age&#x27; =&gt; 30 &#125;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于</strong>：存储数据并保持唯一性。</p><hr><h3 id="2-get-key-获取键对应的值"><a href="#2-get-key-获取键对应的值" class="headerlink" title="(2) .get(key) - 获取键对应的值"></a><strong>(2) <code>.get(key)</code> - 获取键对应的值</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// &#x27;Alice&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">get</span>(<span class="string">&quot;gender&quot;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>✅ **比对象 <code>&#123;&#125;</code> 的 <code>obj[key]</code> 更安全，不存在的键不会报错，只会返回 <code>undefined</code>。</p><hr><h3 id="3-has-key-检查-Map-是否包含某个键"><a href="#3-has-key-检查-Map-是否包含某个键" class="headerlink" title="(3) .has(key) - 检查 Map 是否包含某个键"></a><strong>(3) <code>.has(key)</code> - 检查 <code>Map</code> 是否包含某个键</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="title function_">has</span>(<span class="string">&quot;gender&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>✅ **比对象 <code>obj.hasOwnProperty(key)</code> 更直观。</p><hr><h3 id="4-delete-key-删除键值对"><a href="#4-delete-key-删除键值对" class="headerlink" title="(4) .delete(key) - 删除键值对"></a><strong>(4) <code>.delete(key)</code> - 删除键值对</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myMap.<span class="title function_">delete</span>(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap);</span><br><span class="line"><span class="comment">// Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;Alice&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>删除特定的键值对，<code>true</code> 表示删除成功，<code>false</code> 表示不存在该键。</strong></p><hr><h3 id="5-clear-清空-Map"><a href="#5-clear-清空-Map" class="headerlink" title="(5) .clear() - 清空 Map"></a><strong>(5) <code>.clear()</code> - 清空 <code>Map</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myMap.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap); <span class="comment">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong> 彻底清空 <code>Map</code>。</p><hr><h3 id="6-size-获取-Map-的大小"><a href="#6-size-获取-Map-的大小" class="headerlink" title="(6) .size - 获取 Map 的大小"></a><strong>(6) <code>.size</code> - 获取 <code>Map</code> 的大小</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="property">size</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong> 获取 <code>Map</code> 的键值对数量（比 <code>Object.keys(obj).length</code> 更高效）。</p><hr><h2 id="3-遍历-Map"><a href="#3-遍历-Map" class="headerlink" title="3. 遍历 Map"></a><strong>3. 遍历 <code>Map</code></strong></h2><h3 id="1-forEach-遍历-1"><a href="#1-forEach-遍历-1" class="headerlink" title="(1) forEach() 遍历"></a><strong>(1) <code>forEach()</code> 遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong> 方便对 <code>Map</code> 进行迭代操作。</p><hr><h3 id="2-for-of-遍历-1"><a href="#2-for-of-遍历-1" class="headerlink" title="(2) for...of 遍历"></a><strong>(2) <code>for...of</code> 遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> myMap) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>✅ **比 <code>forEach()</code> 语法更简洁，可用于解构赋值。</p><hr><h3 id="3-keys-values-entries"><a href="#3-keys-values-entries" class="headerlink" title="(3) keys() &#x2F; values() &#x2F; entries()"></a><strong>(3) <code>keys()</code> &#x2F; <code>values()</code> &#x2F; <code>entries()</code></strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...myMap.<span class="title function_">keys</span>()]); <span class="comment">// [&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...myMap.<span class="title function_">values</span>()]); <span class="comment">// [&#x27;Alice&#x27;, 30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...myMap.<span class="title function_">entries</span>()]); <span class="comment">// [[&#x27;name&#x27;, &#x27;Alice&#x27;], [&#x27;age&#x27;, 30]]</span></span><br></pre></td></tr></table></figure><p>✅ <strong>适用于：</strong> 快速获取 <code>Map</code> 的键、值或键值对。</p><hr><h2 id="4-Map-vs-Object"><a href="#4-Map-vs-Object" class="headerlink" title="4. Map vs Object"></a><strong>4. <code>Map</code> vs <code>Object</code></strong></h2><table><thead><tr><th><strong>特性</strong></th><th><strong><code>Map</code></strong></th><th><strong><code>Object</code></strong></th></tr></thead><tbody><tr><td>键类型</td><td>任意类型（对象、数组、函数等）</td><td>只能是字符串或 <code>Symbol</code></td></tr><tr><td>键的顺序</td><td>按插入顺序存储</td><td>无序（ES6 之后 <code>Object</code> 也是有序的）</td></tr><tr><td>获取大小</td><td><code>size</code></td><td><code>Object.keys(obj).length</code></td></tr><tr><td>迭代方式</td><td><code>forEach()</code>、<code>for...of</code></td><td><code>for...in</code>（需 <code>hasOwnProperty</code> 过滤）</td></tr><tr><td>性能</td><td><strong>适用于大量数据存取</strong></td><td><strong>适用于小型数据结构</strong></td></tr></tbody></table><hr><h2 id="5-Map-实际应用场景"><a href="#5-Map-实际应用场景" class="headerlink" title="5. Map 实际应用场景"></a><strong>5. <code>Map</code> 实际应用场景</strong></h2><h3 id="1-统计字符串中字符出现次数"><a href="#1-统计字符串中字符出现次数" class="headerlink" title="(1) 统计字符串中字符出现次数"></a><strong>(1) 统计字符串中字符出现次数</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countChars</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> charMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> char <span class="keyword">of</span> str) &#123;</span><br><span class="line">    charMap.<span class="title function_">set</span>(char, (charMap.<span class="title function_">get</span>(char) || <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> charMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countChars</span>(<span class="string">&quot;hello world&quot;</span>));</span><br><span class="line"><span class="comment">// Map(8) &#123; &#x27;h&#x27; =&gt; 1, &#x27;e&#x27; =&gt; 1, &#x27;l&#x27; =&gt; 3, &#x27;o&#x27; =&gt; 2, &#x27; &#x27; =&gt; 1, &#x27;w&#x27; =&gt; 1, &#x27;r&#x27; =&gt; 1, &#x27;d&#x27; =&gt; 1 &#125;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>比对象 <code>&#123;&#125;</code> 更直观，且不受原型链干扰。</strong></p><hr><h3 id="2-记住对象的状态"><a href="#2-记住对象的状态" class="headerlink" title="(2) 记住对象的状态"></a><strong>(2) 记住对象的状态</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> user2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userStatus = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">userStatus.<span class="title function_">set</span>(user1, <span class="string">&quot;online&quot;</span>);</span><br><span class="line">userStatus.<span class="title function_">set</span>(user2, <span class="string">&quot;offline&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userStatus.<span class="title function_">get</span>(user1)); <span class="comment">// &#x27;online&#x27;</span></span><br></pre></td></tr></table></figure><p>✅ <strong>比对象 <code>&#123;&#125;</code> 更适合存储对象作为键的数据。</strong></p><hr><h3 id="3-Map-实现-LRU-缓存"><a href="#3-Map-实现-LRU-缓存" class="headerlink" title="(3) Map 实现 LRU 缓存"></a><strong>(3) <code>Map</code> 实现 LRU 缓存</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">limit</span> = limit;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">get</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value); <span class="comment">// 使其变为最新</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">put</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">has</span>(key)) <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(key);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="property">size</span> &gt;= <span class="variable language_">this</span>.<span class="property">limit</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">keys</span>().<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 删除最早的键</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cache</span>.<span class="title function_">set</span>(key, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">LRUCache</span>(<span class="number">3</span>);</span><br><span class="line">cache.<span class="title function_">put</span>(<span class="number">1</span>, <span class="string">&quot;one&quot;</span>);</span><br><span class="line">cache.<span class="title function_">put</span>(<span class="number">2</span>, <span class="string">&quot;two&quot;</span>);</span><br><span class="line">cache.<span class="title function_">put</span>(<span class="number">3</span>, <span class="string">&quot;three&quot;</span>);</span><br><span class="line">cache.<span class="title function_">get</span>(<span class="number">2</span>); <span class="comment">// 访问 2，使其变为最新</span></span><br><span class="line">cache.<span class="title function_">put</span>(<span class="number">4</span>, <span class="string">&quot;four&quot;</span>); <span class="comment">// 插入 4，最早的 1 被删除</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...cache.<span class="property">cache</span>.<span class="title function_">keys</span>()]); <span class="comment">// [3, 2, 4]</span></span><br></pre></td></tr></table></figure><p>✅ <strong>比数组或对象更适用于 LRU（最近最少使用）缓存。</strong></p><hr><h2 id="6-Map-与-Set-对比"><a href="#6-Map-与-Set-对比" class="headerlink" title="6. Map 与 Set 对比"></a><strong>6. <code>Map</code> 与 <code>Set</code> 对比</strong></h2><table><thead><tr><th>特性</th><th><code>Map</code></th><th><code>Set</code></th></tr></thead><tbody><tr><td>存储结构</td><td><strong>键值对</strong>（key-value）</td><td><strong>值的集合</strong>（无重复）</td></tr><tr><td>访问方式</td><td><code>.get(key)</code></td><td><code>.has(value)</code></td></tr><tr><td>迭代方式</td><td><code>.keys()</code> <code>.values()</code> <code>.entries()</code></td><td><code>.values()</code></td></tr><tr><td>适用场景</td><td><strong>关联数据</strong>（缓存、映射、计数）</td><td><strong>唯一值集合</strong>（去重、集合运算）</td></tr></tbody></table><hr><h2 id="7-总结-2"><a href="#7-总结-2" class="headerlink" title="7. 总结"></a><strong>7. 总结</strong></h2><p>✅ <strong><code>Map</code> 适用于存储</strong>：</p><ul><li><strong>唯一键值对</strong>（不重复）</li><li><strong>键可以是任何类型</strong>（对象、数组、函数）</li><li><strong>需要有序存储数据</strong></li><li><strong>需要高效读取和删除数据</strong></li></ul><p>✅ <strong>常见用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// &#x27;Alice&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>💡 <code>Map</code> 是对象 <code>&#123;&#125;</code> 的增强版，适用于需要高效存储键值对的场景！🚀</strong></p><h1 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h1><h2 id="CSS-媒体查询详细使用方法总结"><a href="#CSS-媒体查询详细使用方法总结" class="headerlink" title="CSS 媒体查询详细使用方法总结"></a><strong>CSS 媒体查询详细使用方法总结</strong></h2><p>CSS <strong>媒体查询</strong>（Media Query）用于根据设备的特性（如屏幕宽度、高度、分辨率、方向等）应用不同的样式，实现响应式设计，使网页适配不同的设备，如手机、平板、桌面端等。</p><hr><h3 id="1-媒体查询基本语法"><a href="#1-媒体查询基本语法" class="headerlink" title="1. 媒体查询基本语法"></a><strong>1. 媒体查询基本语法</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> [media-type] <span class="keyword">and</span> (media-feature) &#123;</span><br><span class="line">  <span class="comment">/* CSS 样式 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>media-type（媒体类型，可选）</strong>：<ul><li><code>all</code>（默认）：适用于所有设备</li><li><code>screen</code>：屏幕设备（电脑、手机、平板等）</li><li><code>print</code>：打印设备</li><li><code>speech</code>：语音阅读器</li></ul></li><li><strong>media-feature（媒体特性）</strong>：<ul><li><code>width</code> &#x2F; <code>height</code>：指定视口的宽度&#x2F;高度</li><li><code>min-width</code> &#x2F; <code>max-width</code>：最小&#x2F;最大宽度（用于响应式设计）</li><li><code>orientation</code>：设备方向（<code>portrait</code> 竖屏 &#x2F; <code>landscape</code> 横屏）</li><li><code>aspect-ratio</code>：屏幕宽高比</li><li><code>resolution</code>：屏幕分辨率（<code>min-resolution: 2dppx</code> 适用于 Retina 屏）</li><li><code>hover</code>：是否支持悬停（<code>hover: hover</code> 适用于鼠标设备）</li><li><code>pointer</code>：指针精度（<code>pointer: coarse</code> 适用于触摸屏）</li></ul></li></ul><hr><h3 id="2-常见媒体查询使用示例"><a href="#2-常见媒体查询使用示例" class="headerlink" title="2. 常见媒体查询使用示例"></a><strong>2. 常见媒体查询使用示例</strong></h3><h4 id="（1）适配不同屏幕宽度"><a href="#（1）适配不同屏幕宽度" class="headerlink" title="（1）适配不同屏幕宽度"></a><strong>（1）适配不同屏幕宽度</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 小屏幕（手机端） */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightgray;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 平板端 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">601px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 电脑端 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1025px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（2）适配设备方向"><a href="#（2）适配设备方向" class="headerlink" title="（2）适配设备方向"></a><strong>（2）适配设备方向</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 竖屏（portrait）模式 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: portrait) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 横屏（landscape）模式 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（3）高分辨率（Retina-屏幕）适配"><a href="#（3）高分辨率（Retina-屏幕）适配" class="headerlink" title="（3）高分辨率（Retina 屏幕）适配"></a><strong>（3）高分辨率（Retina 屏幕）适配</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 适用于高分辨率屏幕，如 Retina 设备 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-resolution</span>: <span class="number">2dppx</span>) &#123;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;logo@2x.png&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（4）判断是否支持悬停（鼠标）"><a href="#（4）判断是否支持悬停（鼠标）" class="headerlink" title="（4）判断是否支持悬停（鼠标）"></a><strong>（4）判断是否支持悬停（鼠标）</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 仅当设备支持鼠标悬停时生效 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">hover</span>: <span class="attribute">hover</span>) &#123;</span><br><span class="line">  <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 适用于触摸屏（不支持悬停） */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">hover</span>: none) &#123;</span><br><span class="line">  <span class="selector-class">.button</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="（5）组合多个条件"><a href="#（5）组合多个条件" class="headerlink" title="（5）组合多个条件"></a><strong>（5）组合多个条件</strong></h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 屏幕宽度在 600px 到 1200px 之间，且为横屏 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1200px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-响应式设计策略"><a href="#3-响应式设计策略" class="headerlink" title="3. 响应式设计策略"></a><strong>3. 响应式设计策略</strong></h3><ol><li><p><strong>移动优先（Mobile First）</strong></p><ul><li>先为小屏幕（手机）编写 CSS 样式，再使用 <code>min-width</code> 媒体查询为更大屏幕（平板、电脑）添加适配规则。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="comment">/* 默认小屏幕 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>桌面优先（Desktop First）</strong></p><ul><li>先为大屏幕（桌面端）编写 CSS 样式，再使用 <code>max-width</code> 媒体查询调整小屏幕（平板、手机）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="comment">/* 默认大屏幕 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="4-媒体查询的优化建议"><a href="#4-媒体查询的优化建议" class="headerlink" title="4. 媒体查询的优化建议"></a><strong>4. 媒体查询的优化建议</strong></h3><p>✅ <strong>避免过多的断点</strong>：只针对关键的屏幕尺寸设置断点，例如：</p><ul><li><strong>移动端（≤ 600px）</strong></li><li><strong>平板端（601px - 1024px）</strong></li><li><strong>桌面端（≥ 1025px）</strong></li></ul><p>✅ <strong>优先使用 <code>em</code> 或 <code>rem</code> 作为单位</strong>：让页面更具伸缩性，不依赖固定像素值。</p><p>✅ <strong>使用 <code>flexbox</code> 或 <code>grid</code> 结合媒体查询</strong>：提高布局适配能力。</p><p>✅ **避免 <code>!important</code>**：会影响后续样式的覆盖。</p><p>✅ <strong>测试不同设备和浏览器</strong>：使用 Chrome DevTools（F12 → 设备模式）或在线工具（如 <a href="https://responsivedesignchecker.com/">Responsive Design Checker</a>）检查适配情况。</p><hr><h3 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a><strong>5. 结论</strong></h3><ul><li>CSS <strong>媒体查询</strong>是一种强大的技术，可以根据不同设备特性动态调整样式，实现响应式设计。</li><li><strong>基本语法</strong>：<code>@media media-type and (media-feature) &#123; /* 样式 */ &#125;</code></li><li><strong>常用特性</strong>：<code>width</code>、<code>min-width</code>、<code>max-width</code>、<code>orientation</code>、<code>resolution</code>、<code>hover</code></li><li><strong>推荐策略</strong>：采用 <strong>移动优先</strong>（Mobile First）进行开发，更有利于适配不同设备。</li><li><strong>优化建议</strong>：合理选择断点、使用 <code>em/rem</code>、结合 <code>flexbox/grid</code>，提升适配能力。</li></ul><hr><p>这样，你就可以轻松掌握 CSS 媒体查询并灵活运用于项目中啦！🚀 如果你有更具体的需求，比如如何与 <strong>Vue.js</strong> 或 <strong>Tailwind CSS</strong> 结合使用，也可以告诉我哦~ 😃</p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p><code>axios</code> 的配置对象可以用于 <code>axios.get</code>、<code>axios.post</code> 或 <code>axios.create</code>，下面是详细的写法：</p><hr><h2 id="1-基本的-axios-配置对象"><a href="#1-基本的-axios-配置对象" class="headerlink" title="1. 基本的 axios 配置对象"></a><strong>1. 基本的 <code>axios</code> 配置对象</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>, <span class="comment">// 请求方法 (get, post, put, delete)</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;https://api.example.com/data&quot;</span>, <span class="comment">// 请求地址</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;https://api.example.com&quot;</span>, <span class="comment">// 基础URL，会与 `url` 进行拼接</span></span><br><span class="line">  <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;, <span class="comment">// GET 请求参数（会拼接到 URL）</span></span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;, <span class="comment">// POST/PUT 请求体</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer your_token_here&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>, <span class="comment">// 请求超时时间 (ms)</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&quot;json&quot;</span>, <span class="comment">// 响应数据格式 (json, blob, text, document, arraybuffer, stream)</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// 是否允许携带跨域 Cookie</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 自定义成功的 HTTP 状态码</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">axios</span>(config)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure><hr><h2 id="2-axios-create-配置全局实例"><a href="#2-axios-create-配置全局实例" class="headerlink" title="2. axios.create 配置全局实例"></a><strong>2. <code>axios.create</code> 配置全局实例</strong></h2><p>如果你要创建一个 <strong>默认配置的 <code>axios</code> 实例</strong>，可以使用 <code>axios.create</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> apiClient = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="title class_">Authorization</span>: <span class="string">&quot;Bearer your_token_here&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义实例</span></span><br><span class="line">apiClient.<span class="title function_">get</span>(<span class="string">&quot;/user/123&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>));</span><br><span class="line">apiClient</span><br><span class="line">  .<span class="title function_">post</span>(<span class="string">&quot;/user&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="3-拦截器（请求和响应）"><a href="#3-拦截器（请求和响应）" class="headerlink" title="3. 拦截器（请求和响应）"></a><strong>3. 拦截器（请求和响应）</strong></h2><p>你可以用 <code>interceptors</code> 在请求或响应前后进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> api = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&quot;https://api.example.com&quot;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求拦截器：&quot;</span>, config);</span><br><span class="line">    config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">&quot;Bearer your_token_here&quot;</span>; <span class="comment">// 自动添加 token</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">api.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;响应拦截器：&quot;</span>, response);</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>; <span class="comment">// 直接返回数据，减少调用时的 `.data`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;响应错误：&quot;</span>, error);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 API</span></span><br><span class="line">api.<span class="title function_">get</span>(<span class="string">&quot;/user/123&quot;</span>).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">error</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="4-发送-FormData"><a href="#4-发送-FormData" class="headerlink" title="4. 发送 FormData"></a><strong>4. 发送 <code>FormData</code></strong></h2><p>如果要发送 <code>multipart/form-data</code>（比如文件上传），可以这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&quot;file&quot;</span>, fileInput.<span class="property">files</span>[<span class="number">0</span>]); <span class="comment">// 假设有一个 &lt;input type=&quot;file&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;https://api.example.com/upload&quot;</span>, formData, &#123;</span><br><span class="line">  <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data&quot;</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="5-取消请求"><a href="#5-取消请求" class="headerlink" title="5. 取消请求"></a><strong>5. 取消请求</strong></h2><p>可以用 <code>AbortController</code> 或 <code>CancelToken</code> 取消请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>, &#123; <span class="attr">signal</span>: controller.<span class="property">signal</span> &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求取消&quot;</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">controller.<span class="title function_">abort</span>();</span><br></pre></td></tr></table></figure><hr><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><code>axios(config)</code> 适用于单个请求。</li><li><code>axios.create(config)</code> 适用于全局默认配置。</li><li><code>interceptors</code> 适用于 <strong>拦截请求或响应</strong>。</li><li><code>FormData</code> 适用于 <strong>上传文件</strong>。</li><li><code>AbortController</code> 适用于 <strong>取消请求</strong>。</li></ul><p>这样你可以根据不同需求灵活使用 <code>axios</code>。 🚀</p><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><p><code>fetch</code> 是现代 JavaScript 用于进行 HTTP 请求的 API，相比 <code>XMLHttpRequest</code> 更加简洁、灵活，并且基于 <code>Promise</code> 进行异步操作。下面详细介绍 <code>fetch</code> 的用法，包括基础用法、请求参数、错误处理以及 <code>async/await</code> 方式等。</p><hr><h2 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. <strong>基本用法</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>()) <span class="comment">// 解析 JSON</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data)) <span class="comment">// 处理数据</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求失败:&quot;</span>, error)); <span class="comment">// 处理错误</span></span><br></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h3><ol><li><code>fetch(url)</code> 返回一个 <code>Promise</code>，解析后返回 <code>Response</code> 对象。</li><li><code>response.json()</code> 解析 JSON 数据（也是 <code>Promise</code>）。</li><li><code>.then(data =&gt; ...)</code> 处理解析后的数据。</li><li><code>.catch(error =&gt; ...)</code> 捕获请求失败（如网络错误）。</li></ol><hr><h2 id="2-使用-async-await"><a href="#2-使用-async-await" class="headerlink" title="2. 使用 async/await"></a>2. <strong>使用 <code>async/await</code></strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`请求失败，状态码：<span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求错误:&quot;</span>, error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getData</span>();</span><br></pre></td></tr></table></figure><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>await fetch(url)</code> 获取 <code>Response</code> 对象。</li><li>检查 <code>response.ok</code>（状态码是否 200-299）。</li><li><code>await response.json()</code> 解析 JSON 数据。</li><li><code>try-catch</code> 捕获异常（如网络错误、JSON 解析错误）。</li></ul><hr><h2 id="3-GET-请求（带参数）"><a href="#3-GET-请求（带参数）" class="headerlink" title="3. GET 请求（带参数）"></a>3. <strong>GET 请求（带参数）</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(&#123; <span class="attr">userId</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">`https://jsonplaceholder.typicode.com/posts?<span class="subst">$&#123;params&#125;</span>`</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><h3 id="解析-2"><a href="#解析-2" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>URLSearchParams</code> 用于构造查询字符串，如 <code>?userId=1</code>。</li><li><code>fetch(url + &#39;?&#39; + params)</code> 发送带参数的 <code>GET</code> 请求。</li></ul><hr><h2 id="4-POST-请求（提交-JSON-数据）"><a href="#4-POST-请求（提交-JSON-数据）" class="headerlink" title="4. POST 请求（提交 JSON 数据）"></a>4. <strong>POST 请求（提交 JSON 数据）</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;测试文章&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;这是内容&quot;</span>,</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建成功:&quot;</span>, data));</span><br></pre></td></tr></table></figure><h3 id="解析-3"><a href="#解析-3" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>method: &quot;POST&quot;</code> 指定请求方法。</li><li><code>headers</code> 设定 <code>Content-Type</code> 为 <code>application/json</code>。</li><li><code>body: JSON.stringify(&#123;...&#125;)</code> 发送 JSON 数据。</li></ul><hr><h2 id="5-PUT-请求（更新数据）"><a href="#5-PUT-请求（更新数据）" class="headerlink" title="5. PUT 请求（更新数据）"></a>5. <strong>PUT 请求（更新数据）</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;更新后的标题&quot;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;更新的内容&quot;</span>,</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新成功:&quot;</span>, data));</span><br></pre></td></tr></table></figure><h3 id="解析-4"><a href="#解析-4" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>PUT</code> 用于更新资源（通常需要提供 <code>id</code>）。</li><li>需要完整的对象数据，否则可能会丢失字段。</li></ul><hr><h2 id="6-PATCH-请求（部分更新数据）"><a href="#6-PATCH-请求（部分更新数据）" class="headerlink" title="6. PATCH 请求（部分更新数据）"></a>6. <strong>PATCH 请求（部分更新数据）</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;PATCH&quot;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;仅更新标题&quot;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;部分更新成功:&quot;</span>, data));</span><br></pre></td></tr></table></figure><h3 id="解析-5"><a href="#解析-5" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>PATCH</code> 只更新提供的字段，而不是整个对象。</li></ul><hr><h2 id="7-DELETE-请求"><a href="#7-DELETE-请求" class="headerlink" title="7. DELETE 请求"></a>7. <strong>DELETE 请求</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;错误:&quot;</span>, error));</span><br></pre></td></tr></table></figure><h3 id="解析-6"><a href="#解析-6" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>DELETE</code> 方法通常不需要 <code>body</code>。</li><li>服务器返回 <code>200</code> 或 <code>204</code> 代表删除成功。</li></ul><hr><h2 id="8-超时处理"><a href="#8-超时处理" class="headerlink" title="8. 超时处理"></a>8. <strong>超时处理</strong></h2><p><code>fetch</code> 本身不支持超时，但可以使用 <code>AbortController</code> 来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"><span class="keyword">const</span> signal = controller.<span class="property">signal</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.<span class="title function_">abort</span>(), <span class="number">5000</span>); <span class="comment">// 5 秒超时</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts&quot;</span>, &#123; signal &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求超时或失败:&quot;</span>, error));</span><br></pre></td></tr></table></figure><h3 id="解析-7"><a href="#解析-7" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>AbortController</code> 允许中止 <code>fetch</code> 请求。</li><li>5 秒后 <code>controller.abort()</code> 触发请求中止。</li></ul><hr><h2 id="9-处理二进制数据（如图片-文件）"><a href="#9-处理二进制数据（如图片-文件）" class="headerlink" title="9. 处理二进制数据（如图片&#x2F;文件）"></a>9. <strong>处理二进制数据（如图片&#x2F;文件）</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://via.placeholder.com/150&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">blob</span>()) <span class="comment">// 获取 Blob（二进制对象）</span></span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> imgURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> += <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;imgURL&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="解析-8"><a href="#解析-8" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>response.blob()</code> 处理图片&#x2F;文件下载。</li></ul><hr><h2 id="10-并行多个请求"><a href="#10-并行多个请求" class="headerlink" title="10. 并行多个请求"></a>10. <strong>并行多个请求</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">    res.<span class="title function_">json</span>()</span><br><span class="line">  ),</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/posts/2&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span></span><br><span class="line">    res.<span class="title function_">json</span>()</span><br><span class="line">  ),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;两个请求的数据:&quot;</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解析-9"><a href="#解析-9" class="headerlink" title="解析"></a><strong>解析</strong></h3><ul><li><code>Promise.all([...])</code> 并行执行多个 <code>fetch</code> 请求，等所有请求完成后返回结果。</li></ul><hr><h2 id="11-使用-fetch-进行跨域请求"><a href="#11-使用-fetch-进行跨域请求" class="headerlink" title="11. 使用 fetch 进行跨域请求"></a>11. <strong>使用 <code>fetch</code> 进行跨域请求</strong></h2><h3 id="JSONP（如果服务器支持）"><a href="#JSONP（如果服务器支持）" class="headerlink" title="JSONP（如果服务器支持）"></a><strong>JSONP（如果服务器支持）</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonpRequest</span>(<span class="params">url, callbackName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> callback = <span class="string">`jsonpCallback_<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>[callback] = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">window</span>[callback];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;callback&#125;</span>`</span>;</span><br><span class="line">    script.<span class="property">onerror</span> = reject;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonpRequest</span>(<span class="string">&quot;https://example.com/data&quot;</span>, <span class="string">&quot;callback&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;JSONP 数据:&quot;</span>, data))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;JSONP 失败:&quot;</span>, error));</span><br></pre></td></tr></table></figure><h3 id="CORS-方案"><a href="#CORS-方案" class="headerlink" title="CORS 方案"></a><strong>CORS 方案</strong></h3><p>如果是 <strong>跨域</strong> 请求，后端需要支持 <code>Access-Control-Allow-Origin</code>。</p><hr><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a><strong>总结</strong></h2><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><code>GET</code></td><td>获取数据</td><td>可带查询参数</td></tr><tr><td><code>POST</code></td><td>提交新数据</td><td><code>body</code> 发送 JSON</td></tr><tr><td><code>PUT</code></td><td>更新整个资源</td><td>需提供完整数据</td></tr><tr><td><code>PATCH</code></td><td>局部更新资源</td><td>只修改部分字段</td></tr><tr><td><code>DELETE</code></td><td>删除资源</td><td>一般不带 <code>body</code></td></tr><tr><td><code>.json()</code></td><td>解析 JSON 响应</td><td><code>Promise</code> 方式解析</td></tr><tr><td><code>.text()</code></td><td>解析文本响应</td><td>适用于 HTML 或纯文本</td></tr><tr><td><code>.blob()</code></td><td>解析二进制数据</td><td>适用于图片&#x2F;文件</td></tr></tbody></table><p>现在你可以灵活使用 <code>fetch</code> 进行各种 HTTP 请求了！🚀</p><h1 id="bind-call-apply"><a href="#bind-call-apply" class="headerlink" title="bind&amp;call&amp;apply"></a>bind&amp;call&amp;apply</h1><p><code>bind</code>、<code>call</code> 和 <code>apply</code> 都是用于<strong>改变 <code>this</code> 指向</strong>的方法，它们的主要区别如下：</p><hr><h2 id="1-call"><a href="#1-call" class="headerlink" title="1. call"></a><strong>1. <code>call</code></strong></h2><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>立即调用</strong>函数</li><li><strong>参数直接传递</strong></li><li><code>thisArg</code> 指定 <code>this</code> 指向</li></ul><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">greeting</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line">sayHello.<span class="title function_">call</span>(person, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出: Hello, Alice</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-apply"><a href="#2-apply" class="headerlink" title="2. apply"></a><strong>2. <code>apply</code></strong></h2><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func.<span class="title function_">apply</span>(thisArg, [arg1, arg2, ...])</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>立即调用</strong>函数</li><li><strong>参数必须以数组形式传递</strong></li><li><code>thisArg</code> 指定 <code>this</code> 指向</li></ul><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span> + a + b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">value</span>: <span class="number">10</span> &#125;;</span><br><span class="line">sum.<span class="title function_">apply</span>(obj, [<span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure><p><code>apply</code> 适用于参数数量不确定的场景，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers)); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-bind"><a href="#3-bind" class="headerlink" title="3. bind"></a><strong>3. <code>bind</code></strong></h2><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newFunc = func.<span class="title function_">bind</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>不会立即调用</strong>，而是返回一个<strong>新的函数</strong></li><li><strong>参数可以预先传入</strong></li><li><code>thisArg</code> 指定 <code>this</code> 指向</li></ul><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting + <span class="string">&quot;, &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> sayHi = greet.<span class="title function_">bind</span>(user, <span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// 输出: Hi, Bob</span></span><br></pre></td></tr></table></figure><hr><h2 id="对比总结"><a href="#对比总结" class="headerlink" title="对比总结"></a><strong>对比总结</strong></h2><table><thead><tr><th>方法</th><th>是否立即执行</th><th>参数传递方式</th><th>是否返回新函数</th></tr></thead><tbody><tr><td><code>call</code></td><td>是</td><td>逗号分隔传递参数</td><td>否</td></tr><tr><td><code>apply</code></td><td>是</td><td>以<strong>数组</strong>传递参数</td><td>否</td></tr><tr><td><code>bind</code></td><td>否</td><td>逗号分隔传递参数</td><td><strong>是</strong></td></tr></tbody></table><p><strong>什么时候用？</strong></p><ul><li><strong><code>call</code><strong>：</strong>立即调用</strong>，适用于改变 <code>this</code> 并传递参数的情况。</li><li><strong><code>apply</code><strong>：</strong>立即调用</strong>，适用于<strong>参数以数组形式传递</strong>的情况（如 <code>Math.max.apply(null, arr)</code>）。</li><li><strong><code>bind</code><strong>：</strong>返回新函数</strong>，适用于需要<strong>稍后执行</strong>，或<strong>部分参数预设</strong>的情况。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>某某音乐搜索js逆向练习</title>
      <link href="/posts/31564.html"/>
      <url>/posts/31564.html</url>
      
        <content type="html"><![CDATA[<h1 id="F12抓包寻找加密位置"><a href="#F12抓包寻找加密位置" class="headerlink" title="F12抓包寻找加密位置"></a>F12抓包寻找加密位置</h1><img src="./31564/image-20250213132432895.png" alt="image-20250213132432895" style="zoom:80%;" /><p>可以看到搜索的话一共会发三个请求，前两个是热搜，第三个是对用户输入内容进行的请求</p><p>也可以从表单数据中看出，只有第三个有我们的<code>query</code></p><p>可以看到总共就一个<code>sign</code>的加密参数，还有一个<code>searchid</code>,其他都是不变的，我们需要去模拟数据</p><img src="./31564/image-20250213132632609.png" alt="image-20250213132632609" style="zoom:80%;" /><p>下面直接去搜这个sign这个参数，可以看到只有8个很少，全部打上断点</p><img src="./31564/image-20250213132850951.png" alt="image-20250213132850951" style="zoom:80%;" /><p>刷新页面，代码断住了</p><img src="./31564/image-20250213133304693.png" alt="image-20250213133304693" style="zoom:80%;" /><p><img src="/./31564/image-20250213133645985.png" alt="image-20250213133645985"></p><p>可以看到是我们所需的值，<code>function o()</code>是加密的函数，<code>t.data</code>是加密所需参数</p><p>(一共发三次请求，会在这断住三次，最后一次才是我们的目标)</p><p>跟进去，找到加密函数</p><img src="./31564/image-20250213134032995.png" alt="image-20250213134032995" style="zoom:80%;" /><h1 id="webpack加载器"><a href="#webpack加载器" class="headerlink" title="webpack加载器"></a>webpack加载器</h1><p>发现这是一个webpack,把加载器拿下来。先打断点</p><img src="./31564/image-20250213134131436.png" alt="image-20250213134131436" style="zoom:80%;" /><p>webpack在页面初始时先载入，所以要刷新页面</p><p>断住了，进去</p><img src="./31564/image-20250213134339134.png" alt="image-20250213134339134" style="zoom:80%;" /><p>全部复制粘贴</p><img src="./31564/image-20250213134429572.png" alt="image-20250213134429572" style="zoom:33%;" /><img src="./31564/image-20250213134546858.png" alt="image-20250213134546858" style="zoom:80%;" /><p>折叠的地方即为webpack</p><p>然后把加密的函数放入</p><img src="./31564/image-20250213134724744.png" alt="image-20250213134724744" style="zoom:80%;" /><p>注意复制的时候要选取他的父函数，因为加密函数运行时，需要调其他函数</p><p>找到webpack中的加载器,导出</p><img src="./31564/image-20250213135204604.png" alt="image-20250213135204604" style="zoom:80%;" /><p>可以先<code>jzq(0)</code>跑一下，好的，没出现问题（这个比较简单，没有其他的）</p><img src="./31564/image-20250213134949393.png" alt="image-20250213134949393" style="zoom:80%;" /><p>找到加密函数，把他导出来，让外部可以调用</p><img src="./31564/image-20250213135104288.png" alt="image-20250213135104288" style="zoom:80%;" /><p>试着运行一下<br><img src="./31564/image-20250213140436237.png" alt="image-20250213140436237" style="zoom:80%;" /></p><p>可以拿到类似加密结果。</p><h1 id="补环境"><a href="#补环境" class="headerlink" title="补环境"></a>补环境</h1><p>拿到值后，对比发现并不一样，使用脚本一键补环境。得到正确结果</p><h1 id="发请求"><a href="#发请求" class="headerlink" title="发请求"></a>发请求</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">jzq(0);</span><br><span class="line">//searchid生成部分</span><br><span class="line">var a = function (e, t) &#123;</span><br><span class="line">  for (</span><br><span class="line">    var n = &quot;&quot;.concat(e).split(&quot;&quot;).reverse(),</span><br><span class="line">      a = &quot;&quot;.concat(t).split(&quot;&quot;).reverse(),</span><br><span class="line">      r = [],</span><br><span class="line">      i = n.length,</span><br><span class="line">      o = a.length,</span><br><span class="line">      c = 0,</span><br><span class="line">      s = i + o - 1;</span><br><span class="line">    c &lt;= s;</span><br><span class="line">    c++</span><br><span class="line">  )</span><br><span class="line">    r[c] = 0;</span><br><span class="line">  for (var l = 0; l &lt; o; l++)</span><br><span class="line">    for (var u = 0; u &lt; i; u++)</span><br><span class="line">      (r[u + l] += parseInt(n[u], 10) * parseInt(a[l], 10)),</span><br><span class="line">        (r[u + 1 + l] += Math.floor(r[u + l] / 10)),</span><br><span class="line">        (r[u + l] = r[u + l] % 10);</span><br><span class="line">  return r.reverse(), 0 == r[0] &amp;&amp; r.shift(), r.join(&quot;&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">let r = function (e, t) &#123;</span><br><span class="line">  for (</span><br><span class="line">    var n = &quot;&quot;.concat(e).split(&quot;&quot;).reverse(),</span><br><span class="line">      a = &quot;&quot;.concat(t).split(&quot;&quot;).reverse(),</span><br><span class="line">      r = n.length,</span><br><span class="line">      i = a.length,</span><br><span class="line">      o = 0,</span><br><span class="line">      c = 0,</span><br><span class="line">      s = 0,</span><br><span class="line">      l = 0,</span><br><span class="line">      u = 0,</span><br><span class="line">      m = Math.max(r, i);</span><br><span class="line">    u &lt; m;</span><br><span class="line">    u++</span><br><span class="line">  )</span><br><span class="line">    (c = u &lt; r ? parseInt(n[u], 10) : 0),</span><br><span class="line">      (s = u &lt; i ? parseInt(a[u], 10) : 0),</span><br><span class="line">      (l = Math.round(c) + Math.round(s) + o),</span><br><span class="line">      (n[u] = &quot;&quot;.concat(l % 10)),</span><br><span class="line">      (o = l &gt;= 10 ? 1 : 0);</span><br><span class="line">  return 1 == o &amp;&amp; n.push(&quot;1&quot;), n.reverse().join(&quot;&quot;);</span><br><span class="line">&#125;;</span><br><span class="line">const getSearchId = function (e) &#123;</span><br><span class="line">  var t = a(e, &quot;18014398509481984&quot;),</span><br><span class="line">    n = a(Math.round(Math.random() * parseInt(&quot;4194304&quot;, 10)), &quot;4294967296&quot;),</span><br><span class="line">    i = new Date(),</span><br><span class="line">    o =</span><br><span class="line">      1e3 * (3600 * i.getHours() + 60 * i.getMinutes() + i.getSeconds()) +</span><br><span class="line">      i.getMilliseconds();</span><br><span class="line">  return r(r(t, n), o);</span><br><span class="line">&#125;;</span><br><span class="line">//传入参数1是前两次发包调用的</span><br><span class="line">getSearchId(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//注意补全uin是qq号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const searchId = getSearchId(3);</span><br><span class="line">const can = `&#123;&quot;comm&quot;:&#123;&quot;cv&quot;:4747474,&quot;ct&quot;:24,&quot;format&quot;:&quot;json&quot;,&quot;inCharset&quot;:&quot;utf-8&quot;,&quot;outCharset&quot;:&quot;utf-8&quot;,&quot;notice&quot;:0,&quot;platform&quot;:&quot;yqq.json&quot;,&quot;needNewCode&quot;:1,&quot;uin&quot;:***********,&quot;g_tk_new_20200303&quot;:208203872,&quot;g_tk&quot;:208203872&#125;,&quot;req_1&quot;:&#123;&quot;method&quot;:&quot;DoSearchForQQMusicDesktop&quot;,&quot;module&quot;:&quot;music.search.SearchCgiService&quot;,&quot;param&quot;:&#123;&quot;remoteplace&quot;:&quot;txt.yqq.center&quot;,&quot;searchid&quot;:&quot;$&#123;searchId&#125;&quot;,&quot;search_type&quot;:0,&quot;query&quot;:&quot;周杰伦&quot;,&quot;page_num&quot;:1,&quot;num_per_page&quot;:10&#125;&#125;&#125;`;</span><br><span class="line">const timeStamp = Date.now();</span><br><span class="line">console.log(&quot;timeStamp :&gt;&gt; &quot;, timeStamp);</span><br><span class="line">//调用加密</span><br><span class="line">const sign = jzq.l(`$&#123;can&#125;`);</span><br><span class="line">console.log(sign);</span><br><span class="line"></span><br><span class="line">const controller = new AbortController();</span><br><span class="line">const timeoutId = setTimeout(() =&gt; controller.abort(), 30000); // 设置 30 秒超时</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//cookie也请补全</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fetch(`https://u6.y.qq.com/cgi-bin/musics.fcg?_=$&#123;timeStamp&#125;&amp;sign=$&#123;sign&#125;`, &#123;</span><br><span class="line">  method: &quot;POST&quot;,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    accept: &quot;application/json&quot;,</span><br><span class="line">    &quot;accept-language&quot;: &quot;zh-CN,zh;q=0.9&quot;,</span><br><span class="line">    &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">    priority: &quot;u=1, i&quot;,</span><br><span class="line">    &quot;sec-ch-ua&quot;:</span><br><span class="line">      &#x27;&quot;Not A(Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;132&quot;, &quot;Google Chrome&quot;;v=&quot;132&quot;&#x27;,</span><br><span class="line">    &quot;sec-ch-ua-mobile&quot;: &quot;?0&quot;,</span><br><span class="line">    &quot;sec-ch-ua-platform&quot;: &#x27;&quot;Windows&quot;&#x27;,</span><br><span class="line">    &quot;sec-fetch-dest&quot;: &quot;empty&quot;,</span><br><span class="line">    &quot;sec-fetch-mode&quot;: &quot;cors&quot;,</span><br><span class="line">    &quot;sec-fetch-site&quot;: &quot;same-site&quot;,</span><br><span class="line">    cookie:</span><br><span class="line">      cookie也请补全,</span><br><span class="line">    Referer: &quot;https://y.qq.com/&quot;,</span><br><span class="line">    &quot;Referrer-Policy&quot;: &quot;strict-origin-when-cross-origin&quot;,</span><br><span class="line">    &quot;user-agent&quot;:</span><br><span class="line">      &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36&quot;,</span><br><span class="line">    &quot;x-forwarded-for&quot;: &quot;123.456.789.0&quot;, // 伪造的 IP 地址</span><br><span class="line">  &#125;,</span><br><span class="line">  body: can,</span><br><span class="line">  signal: controller.signal,</span><br><span class="line">&#125;)</span><br><span class="line">  .then((response) =&gt; response.json())</span><br><span class="line">  .then((data) =&gt; &#123;</span><br><span class="line">    console.log(data.req_1.data.body.song.list);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch((error) =&gt; console.error(&quot;Error:&quot;, error));</span><br></pre></td></tr></table></figure><p>为什么使用fetch?因为<code>axios</code>设置<code>useragent</code>无效</p><p>这个接口会检查<code>user-agent</code>和<code>cookie</code>,否则的话会返回空数组</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 14311,</span><br><span class="line">      mid: &#x27;002MAeob3zLXwZ&#x27;,</span><br><span class="line">      name: &#x27;J III MP3 Player&#x27;,</span><br><span class="line">      pmid: &#x27;002MAeob3zLXwZ_4&#x27;,</span><br><span class="line">      subtitle: &#x27;《头文字D》电影插曲&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;J III MP3 Player&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 66,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;《头文字D》电影插曲&#x27;,</span><br><span class="line">    desc_hilight: &#x27;《头文字D》电影插曲&#x27;,</span><br><span class="line">    docid: &#x27;7898300423480694200&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 7936,</span><br><span class="line">      e_30s: 67936,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;004cZvLj1qDq4A&#x27;,</span><br><span class="line">      size_128mp3: 4732355,</span><br><span class="line">      size_192aac: 7159409,</span><br><span class="line">      size_192ogg: 6667274,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 11830556,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1798584,</span><br><span class="line">      size_96aac: 3601044,</span><br><span class="line">      size_96ogg: 3329766,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 35323866,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 91454,</span><br><span class="line">      try_end: 119759,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(1) [ [Object] ],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 5105986,</span><br><span class="line">    index_album: 2,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 295,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 8590, mid: &#x27;001uUdCh0iURd6&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;001xd0HI0X9GNq&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 55240,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;m00135c6uxe&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;一路向北&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;《头文字D》电影插曲&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2005-06-24&#x27;,</span><br><span class="line">    title: &#x27;一路向北&#x27;,</span><br><span class="line">    title_hilight: &#x27;一路向北&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -9.625041007995605,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      3.222649097442627</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -9.67300033569336,</span><br><span class="line">      lra: 3.2239999771118164,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;06224SUq4c4kJu&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;0022QZuq2GUPe9&#x27;,</span><br><span class="line">      &#x27;002mqWJx4SEN8o&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;004E2OH50E0lTr&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 33021,</span><br><span class="line">      mid: &#x27;002eFUFm2XYZ7z&#x27;,</span><br><span class="line">      name: &#x27;我很忙&#x27;,</span><br><span class="line">      pmid: &#x27;002eFUFm2XYZ7z_3&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;我很忙&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 54,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;4953153690890266244&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 56949,</span><br><span class="line">      e_30s: 116949,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;0015zR8B3gjJLl&#x27;,</span><br><span class="line">      size_128mp3: 3830789,</span><br><span class="line">      size_192aac: 5795439,</span><br><span class="line">      size_192ogg: 5414761,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 9576656,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1452598,</span><br><span class="line">      size_96aac: 2919222,</span><br><span class="line">      size_96ogg: 2700910,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 26170419,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 56949,</span><br><span class="line">      try_end: 91395,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(2) [ [Object], [Object] ],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 410316,</span><br><span class="line">    index_album: 3,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 239,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 10135, mid: &#x27;000n4lOd35gELj&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;002qU5aY3Qu24y&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 55327,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;l00131om505&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;青花瓷&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2007-11-02&#x27;,</span><br><span class="line">    title: &#x27;青花瓷&#x27;,</span><br><span class="line">    title_hilight: &#x27;青花瓷&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -6.510480880737305,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      5.4178619384765625</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -7.070000171661377,</span><br><span class="line">      lra: 5.4070000648498535,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;061FTWlj3aXk4G&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;003GpJO845eViP&#x27;,</span><br><span class="line">      &#x27;001aeqwg02Dhx6&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;0045Aqhr32f1f6&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 8217,</span><br><span class="line">      mid: &#x27;000I5jJB3blWeN&#x27;,</span><br><span class="line">      name: &#x27;范特西&#x27;,</span><br><span class="line">      pmid: &#x27;000I5jJB3blWeN_2&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;范特西&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 96,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;17128718787565259111&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 63132,</span><br><span class="line">      e_30s: 123132,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;001ndYJ83Nmalf&#x27;,</span><br><span class="line">      size_128mp3: 4336938,</span><br><span class="line">      size_192aac: 6576718,</span><br><span class="line">      size_192ogg: 6492968,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 10841782,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1663933,</span><br><span class="line">      size_96aac: 3321009,</span><br><span class="line">      size_96ogg: 3247627,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 32314200,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 63132,</span><br><span class="line">      try_end: 255974,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(3) [ [Object], [Object], [Object] ],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 97744,</span><br><span class="line">    index_album: 3,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 270,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 50303, mid: &#x27;000YbhEa1dFhgt&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;0009BCJK1nRaad&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 198361,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;g00129pvmvo&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;简单爱&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2001-09-14&#x27;,</span><br><span class="line">    title: &#x27;简单爱&#x27;,</span><br><span class="line">    title_hilight: &#x27;简单爱&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -8.272120475769043,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      3.2054591178894043</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -8.468000411987305,</span><br><span class="line">      lra: 3.2019999027252197,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;060zDoTJ3ga9Vf&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;001CavPn1VMTV8&#x27;,</span><br><span class="line">      &#x27;002Ab7sL18royS&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;004CL9EE0gG1yb&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 8220,</span><br><span class="line">      mid: &#x27;000MkMni19ClKG&#x27;,</span><br><span class="line">      name: &#x27;叶惠美&#x27;,</span><br><span class="line">      pmid: &#x27;000MkMni19ClKG_5&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;叶惠美&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 73,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;6134062807768774859&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 12896,</span><br><span class="line">      e_30s: 72896,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;002DidUP2OXR90&#x27;,</span><br><span class="line">      size_128mp3: 5047887,</span><br><span class="line">      size_192aac: 7616085,</span><br><span class="line">      size_192ogg: 7222817,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 12619426,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1916657,</span><br><span class="line">      size_96aac: 3847745,</span><br><span class="line">      size_96ogg: 3575011,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 34792854,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 69819,</span><br><span class="line">      try_end: 123862,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(1) [ [Object] ],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 97775,</span><br><span class="line">    index_album: 5,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 315,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 50002, mid: &#x27;001oIcF13yQwzh&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;003uEbEr0jcW7c&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 55330,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;i0013cx55dv&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;东风破&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2003-07-31&#x27;,</span><br><span class="line">    title: &#x27;东风破&#x27;,</span><br><span class="line">    title_hilight: &#x27;东风破&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -6.446102142333984,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      8.311640739440918</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -6.531000137329102,</span><br><span class="line">      lra: 8.312999725341797,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;061HsQk248FyGT&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;0028ZHWf2tqhWY&#x27;,</span><br><span class="line">      &#x27;000544bT1lbMHi&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;003Man0Y1WQnMQ&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 60671,</span><br><span class="line">      mid: &#x27;0024bjiL2aocxT&#x27;,</span><br><span class="line">      name: &#x27;十一月的萧邦&#x27;,</span><br><span class="line">      pmid: &#x27;0024bjiL2aocxT_5&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;十一月的萧邦&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 67,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;1010412932424993927&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 75034,</span><br><span class="line">      e_30s: 135034,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;0044M6Un0RXph2&#x27;,</span><br><span class="line">      size_128mp3: 4411755,</span><br><span class="line">      size_192aac: 6673516,</span><br><span class="line">      size_192ogg: 6240591,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 11029094,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1679022,</span><br><span class="line">      size_96aac: 3358084,</span><br><span class="line">      size_96ogg: 3082197,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 30596877,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 75034,</span><br><span class="line">      try_end: 135084,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(0) [],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 718479,</span><br><span class="line">    index_album: 6,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 275,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 8607, mid: &#x27;002FVh9i1aaAav&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;003KtYhg4frNXC&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 195531,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;a0012fdgwi0&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;枫&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2005-11-01&#x27;,</span><br><span class="line">    title: &#x27;枫&#x27;,</span><br><span class="line">    title_hilight: &#x27;枫&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -10.005066871643066,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      10.175203323364258</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -10.095000267028809,</span><br><span class="line">      lra: 10.180999755859375,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;062Er6Yj04UFoR&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;003L8onJ37s6Pn&#x27;,</span><br><span class="line">      &#x27;003qnjK83wcmDJ&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;002I2jxY22d8bz&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 13004,</span><br><span class="line">      mid: &#x27;002jLGWe16Tf1H&#x27;,</span><br><span class="line">      name: &#x27;依然范特西&#x27;,</span><br><span class="line">      pmid: &#x27;002jLGWe16Tf1H_1&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;依然范特西&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 93,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;15480998147651378719&#x27;,</span><br><span class="line">    eq: 0,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 51243,</span><br><span class="line">      e_30s: 111243,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;001xBKNG31ggyO&#x27;,</span><br><span class="line">      size_128mp3: 4250429,</span><br><span class="line">      size_192aac: 6436053,</span><br><span class="line">      size_192ogg: 6430864,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 10625769,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1614174,</span><br><span class="line">      size_96aac: 3238505,</span><br><span class="line">      size_96ogg: 3147079,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 31385885,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 51243,</span><br><span class="line">      try_end: 92265,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(3) [ [Object], [Object], [Object] ],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 102066257,</span><br><span class="line">    index_album: 2,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 265,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 10120, mid: &#x27;004QKRrA2FxnAE&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;002hXDfk0LX9KO&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 198569,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;u0012xltd8y&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;听妈妈的话&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2006-09-05&#x27;,</span><br><span class="line">    title: &#x27;听妈妈的话&#x27;,</span><br><span class="line">    title_hilight: &#x27;听妈妈的话&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -8.161737442016602,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      2.2092809677124023</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -8.458000183105469,</span><br><span class="line">      lra: 2.190000057220459,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;063BvOps2T4p17&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;001KvC4Y0CCjoP&#x27;,</span><br><span class="line">      &#x27;003YqoFm2EKuK3&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;004RveiU41AcUA&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 8221,</span><br><span class="line">      mid: &#x27;001BGzMs369FzU&#x27;,</span><br><span class="line">      name: &#x27;寻找周杰伦&#x27;,</span><br><span class="line">      pmid: &#x27;001BGzMs369FzU_4&#x27;,</span><br><span class="line">      subtitle: &#x27;《寻找周杰伦》电影插曲&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;寻找周杰伦&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 96,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;《寻找周杰伦》电影插曲&#x27;,</span><br><span class="line">    desc_hilight: &#x27;《寻找&lt;em&gt;周杰伦&lt;/em&gt;》电影插曲&#x27;,</span><br><span class="line">    docid: &#x27;2690403057583679707&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 99820,</span><br><span class="line">      e_30s: 159820,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;000WrOmE3v7QhW&#x27;,</span><br><span class="line">      size_128mp3: 4761591,</span><br><span class="line">      size_192aac: 7189236,</span><br><span class="line">      size_192ogg: 6575636,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 11903191,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1794808,</span><br><span class="line">      size_96aac: 3619390,</span><br><span class="line">      size_96ogg: 3360772,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 32951286,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 99820,</span><br><span class="line">      try_end: 142347,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(0) [],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 97782,</span><br><span class="line">    index_album: 2,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 297,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 50005, mid: &#x27;0048qJM60fA2RA&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;003ZdxP61ClQZ5&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 37865,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;r0013wcyzl4&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;断了的弦&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;《寻找周杰伦》电影插曲&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2003-11-13&#x27;,</span><br><span class="line">    title: &#x27;断了的弦&#x27;,</span><br><span class="line">    title_hilight: &#x27;断了的弦&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -7.765069961547852,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      6.808450222015381</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -7.9019999504089355,</span><br><span class="line">      lra: 6.692999839782715,</span><br><span class="line">      peak: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;061CqyRr0BSqLt&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;000cYPbw1YF9D0&#x27;,</span><br><span class="line">      &#x27;003qs3wH24Kd5U&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;000iQzJQ3vz8pX&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  Object &#123;</span><br><span class="line">    act: 3,</span><br><span class="line">    action: Object &#123;</span><br><span class="line">      alert: 16,</span><br><span class="line">      icon2: 0,</span><br><span class="line">      icons: 12992510,</span><br><span class="line">      msgdown: 0,</span><br><span class="line">      msgfav: 0,</span><br><span class="line">      msgid: 0,</span><br><span class="line">      msgpay: 0,</span><br><span class="line">      msgshare: 0,</span><br><span class="line">      switch: 16905999,</span><br><span class="line">      switch2: 524288</span><br><span class="line">    &#125;,</span><br><span class="line">    album: Object &#123;</span><br><span class="line">      id: 8219,</span><br><span class="line">      mid: &#x27;004MGitN0zEHpb&#x27;,</span><br><span class="line">      name: &#x27;八度空间&#x27;,</span><br><span class="line">      pmid: &#x27;004MGitN0zEHpb_2&#x27;,</span><br><span class="line">      subtitle: &#x27;&#x27;,</span><br><span class="line">      time_public: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;八度空间&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    bpm: 130,</span><br><span class="line">    content: &#x27;&#x27;,</span><br><span class="line">    desc: &#x27;&#x27;,</span><br><span class="line">    desc_hilight: &#x27;&#x27;,</span><br><span class="line">    docid: &#x27;14277460620523614365&#x27;,</span><br><span class="line">    eq: 2,</span><br><span class="line">    es: &#x27;&#x27;,</span><br><span class="line">    file: Object &#123;</span><br><span class="line">      b_30s: 74967,</span><br><span class="line">      e_30s: 134967,</span><br><span class="line">      hires_bitdepth: 0,</span><br><span class="line">      hires_sample: 0,</span><br><span class="line">      media_mid: &#x27;0019GXTz1OM6Wu&#x27;,</span><br><span class="line">      size_128mp3: 5111838,</span><br><span class="line">      size_192aac: 7701171,</span><br><span class="line">      size_192ogg: 7529157,</span><br><span class="line">      size_24aac: 0,</span><br><span class="line">      size_320mp3: 12779300,</span><br><span class="line">      size_360ra: Array(0) [],</span><br><span class="line">      size_48aac: 1939479,</span><br><span class="line">      size_96aac: 3896857,</span><br><span class="line">      size_96ogg: 3781878,</span><br><span class="line">      size_ape: 0,</span><br><span class="line">      size_dolby: 0,</span><br><span class="line">      size_dts: 0,</span><br><span class="line">      size_flac: 36625330,</span><br><span class="line">      size_hires: 0,</span><br><span class="line">      size_new: [Array],</span><br><span class="line">      size_try: 960887,</span><br><span class="line">      try_begin: 74967,</span><br><span class="line">      try_end: 137805,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    fnote: 4009,</span><br><span class="line">    genre: 0,</span><br><span class="line">    grp: Array(0) [],</span><br><span class="line">    hotness: Object &#123; desc: &#x27;&#x27;, icon_url: &#x27;&#x27;, jump_type: 0, jump_url: &#x27;&#x27; &#125;,</span><br><span class="line">    href3: &#x27;&#x27;,</span><br><span class="line">    id: 97761,</span><br><span class="line">    index_album: 2,</span><br><span class="line">    index_cd: 0,</span><br><span class="line">    interval: 319,</span><br><span class="line">    isonly: 0,</span><br><span class="line">    ksong: Object &#123; id: 10119, mid: &#x27;002Fqpyf3JS16Q&#x27; &#125;,</span><br><span class="line">    label: &#x27;0&#x27;,</span><br><span class="line">    language: 0,</span><br><span class="line">    lyric: &#x27;&#x27;,</span><br><span class="line">    lyric_hilight: &#x27;&#x27;,</span><br><span class="line">    mid: &#x27;002OKIox28ad9a&#x27;,</span><br><span class="line">    mv: Object &#123;</span><br><span class="line">      id: 142047,</span><br><span class="line">      name: &#x27;&#x27;,</span><br><span class="line">      title: &#x27;&#x27;,</span><br><span class="line">      vid: &#x27;a00303mp2yf&#x27;,</span><br><span class="line">      vt: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#x27;半岛铁盒&#x27;,</span><br><span class="line">    newStatus: 2,</span><br><span class="line">    ov: 0,</span><br><span class="line">    pay: Object &#123;</span><br><span class="line">      pay_down: 1,</span><br><span class="line">      pay_month: 1,</span><br><span class="line">      pay_play: 1,</span><br><span class="line">      pay_status: 0,</span><br><span class="line">      price_album: 0,</span><br><span class="line">      price_track: 200,</span><br><span class="line">      time_free: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    protect: 11,</span><br><span class="line">    sa: 17408,</span><br><span class="line">    singer: Array(1) [ [Object] ],</span><br><span class="line">    status: 0,</span><br><span class="line">    subtitle: &#x27;&#x27;,</span><br><span class="line">    tag: 11,</span><br><span class="line">    tid: 0,</span><br><span class="line">    time_public: &#x27;2002-07-18&#x27;,</span><br><span class="line">    title: &#x27;半岛铁盒&#x27;,</span><br><span class="line">    title_hilight: &#x27;半岛铁盒&#x27;,</span><br><span class="line">    type: 0,</span><br><span class="line">    url: &#x27;&#x27;,</span><br><span class="line">    version: 0,</span><br><span class="line">    vf: Array(3) [</span><br><span class="line">      -8.533852577209473,</span><br><span class="line">      0.9999690055847168,</span><br><span class="line">      7.079852104187012</span><br><span class="line">    ],</span><br><span class="line">    vi: Array(1) [ 2317 ],</span><br><span class="line">    volume: Object &#123;</span><br><span class="line">      gain: -8.755000114440918,</span><br><span class="line">      lra: 7.080999851226807,</span><br><span class="line">      peak: 0.9729999899864197</span><br><span class="line">    &#125;,</span><br><span class="line">    vs: Array(13) [</span><br><span class="line">      &#x27;0611iLs23TZlCZ&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;004AmUJz4LvPgL&#x27;,</span><br><span class="line">      &#x27;004H46Vx3bMr9l&#x27;, &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;002lbBx33YRwdL&#x27;,</span><br><span class="line">      &#x27;&#x27;,               &#x27;&#x27;,</span><br><span class="line">      &#x27;&#x27;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo引入live2d看板娘</title>
      <link href="/posts/63693.html"/>
      <url>/posts/63693.html</url>
      
        <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>在知乎上刷到了一个关于[live2d看板娘](博客园页面的这个姑娘动画是怎么生成的？ - 知乎<br><a href="https://www.zhihu.com/question/659058271)%E7%9A%84%E6%8F%90%E9%97%AE%EF%BC%8C%E6%8F%90%E8%B5%B7%E4%BA%86%E6%88%91%E7%9A%84%E5%85%B4%E8%B6%A3%E3%80%82%E8%87%AA%E5%B7%B1%E4%B9%9F%E5%9C%A8%60bilibili%60%E4%B8%8A%E9%9A%8F%E4%BE%BF%E6%89%BE%E4%BA%86%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%B8%BA%E5%90%8E%E9%9D%A2%E7%9A%84%E4%B8%8D%E5%85%BC%E5%AE%B9%E5%9F%8B%E4%B8%8B%E4%BC%8F%E7%AC%94%EF%BC%89%E3%80%82">https://www.zhihu.com/question/659058271)的提问，提起了我的兴趣。自己也在`bilibili`上随便找了一个模型（为后面的不兼容埋下伏笔）。</a></p><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>网上大部分教程都是采用<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a>。经过一系列操作，报错。看控制台的报错是路径拼接有问题。我去逆向，发现配置不对</p><img src="./63693/image-20250211204935662.png" alt="image-20250211204935662" style="zoom:80%;" /><p>这个模型原本是被用于虚拟主播使用的公共模型，和<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a>并不兼容。</p><p>可替换为<a href="https://github.com/oh-my-live2d/oh-my-live2d">oh-my-live2d</a>,无论是版本2，3都支持。</p><p>在<code>Hexo</code>项目的根目录中的<code>_config.yml</code>配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">OhMyLive2d:</span><br><span class="line">  enable: true</span><br><span class="line">  CDN: https://registry.npmmirror.com/oh-my-live2d/latest/files</span><br><span class="line">  # CDN: https://registry.npmmirror.com/oh-my-live2d/0.13/files/dist/index.min.js</span><br><span class="line">  option:</span><br><span class="line">    # importType: &#x27;cubism2&#x27; #  导入类型, 默认使用全量导入: complete , 可选值: complete, cubism2, cubism5</span><br><span class="line">    libraryUrls: # 自定义 Cubism SDK 外部资源地址</span><br><span class="line">      complete: https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/complete.js</span><br><span class="line">      cubism2: https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/cubism2.js</span><br><span class="line">      cubism5: https://registry.npmmirror.com/oh-my-live2d/latest/files/lib/cubism5.js</span><br><span class="line">    # menus:</span><br><span class="line">    # items: |</span><br><span class="line">    #   (defaultItems)=&gt;&#123;</span><br><span class="line">    #    return [</span><br><span class="line">    #      ...defaultItems,</span><br><span class="line">    #      &#123;</span><br><span class="line">    #        id: &#x27;github&#x27;,</span><br><span class="line">    #        icon: &#x27;github-fill&#x27;,</span><br><span class="line">    #        title: &#x27;我的github&#x27;,</span><br><span class="line">    #        onClick: ()=&gt;window.open(&#x27;https://github.com/hacxy&#x27;)</span><br><span class="line">    #      &#125;</span><br><span class="line">    #    ]</span><br><span class="line">    #   &#125;</span><br><span class="line"></span><br><span class="line">    # items:</span><br><span class="line">    #   - id: &#x27;github&#x27;</span><br><span class="line">    #     icon: &#x27;github-fill&#x27;</span><br><span class="line">    #     title: &#x27;我的github&#x27;</span><br><span class="line">    #     onClick: ()=&gt;window.open(&#x27;https://github.com/hacxy&#x27;)</span><br><span class="line"></span><br><span class="line">    mobileDisplay: true # 是否在移动端显示</span><br><span class="line">    models:</span><br><span class="line">      - path: /live2dModals/MO/MO.model3.json</span><br><span class="line">        mobilePosition: [0, 0] # 移动端时模型在舞台中的位置。 默认值: [0,0] [横坐标, 纵坐标]</span><br><span class="line">        mobileScale: 0.03 # 移动端时模型的缩放比例 默认值: 0.1</span><br><span class="line">        mobileStageStyle: # 移动端时舞台的样式</span><br><span class="line">          width: 200</span><br><span class="line">          height: 200</span><br><span class="line">        motionPreloadStrategy: IDLE # 动作预加载策略 默认值: IDLE 可选值: ALL | IDLE | NONE</span><br><span class="line">        position: [0, 0] # 模型在舞台中的位置。 默认值: [0,0] [横坐标, 纵坐标]</span><br><span class="line">        scale: 0.04 # 模型的缩放比例 默认值: 0.1</span><br><span class="line">        showHitAreaFrames: false # 是否显示点击区域 默认值: false</span><br><span class="line">        stageStyle:</span><br><span class="line">          width: 250</span><br><span class="line">          height: 250</span><br><span class="line">    parentElement: document.body #为组件提供一个父元素，如果未指定则默认挂载到 body 中</span><br><span class="line">    primaryColor: &quot;var(--btn-bg)&quot; # 主题色 支持变量</span><br><span class="line">    sayHello: false # 是否在初始化阶段打印项目信息</span><br><span class="line">    tips:</span><br><span class="line">      style:</span><br><span class="line">        width: 150</span><br><span class="line">        height: 120</span><br><span class="line">        left: calc(50% - 20px)</span><br><span class="line">        top: -100px</span><br><span class="line">      mobileStyle:</span><br><span class="line">        width: 120</span><br><span class="line">        height: 50</span><br><span class="line">        left: calc(50% - 30px)</span><br><span class="line">        top: -100px</span><br><span class="line">      idleTips:</span><br><span class="line">        interval: 15000</span><br><span class="line">        # message:</span><br><span class="line">        #   - 你好呀~</span><br><span class="line">        #   - 欢迎来到我的小站~</span><br><span class="line">        # 自定义提示语 需要 引入 axios 库 ,也可以使用其他方法</span><br><span class="line">        message: |</span><br><span class="line">          function()&#123;</span><br><span class="line">            return axios.get(&#x27;https://v1.hitokoto.cn?c=i&#x27;)</span><br><span class="line">              .then(function (response) &#123;</span><br><span class="line">                return response.data.hitokoto ;</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch(function (error) &#123;</span><br><span class="line">                console.error(error);</span><br><span class="line">              &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        wordTheDay: true</span><br><span class="line">        # 自定义  https://v1.hitokoto.cn  数据</span><br><span class="line">        # wordTheDay: |</span><br><span class="line">        #   function(wordTheDayData)&#123;</span><br><span class="line">        #     return `$&#123;wordTheDayData.hitokoto&#125;    by.$&#123;wordTheDayData.from&#125;`;</span><br><span class="line">        #   &#125;</span><br><span class="line">  then: |</span><br><span class="line">    (oml2d)=&gt;&#123;</span><br><span class="line">       setTimeout(() =&gt; &#123;</span><br><span class="line">      oml2d.tipsMessage(&#x27;hello world&#x27;, 3000, 10);</span><br><span class="line">    &#125;, 8000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>细节样式可以写在单独的<code>css文件</code>里，随后在<code>_config.butterfly.yml</code>配置引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/live2dModals.css&quot;&gt;</span><br><span class="line">    - &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.8/axios.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="还有些什么"><a href="#还有些什么" class="headerlink" title="还有些什么"></a>还有些什么</h1><p>因为这个模型原本用于虚拟主播的模型，所以可以在VTUBE上编辑他。但我不知道怎么把他导出，导致现在还有水印😖，所以就这样吧。<br><img src="./63693/image-20250211211009445.png" alt="image-20250211211009445" style="zoom:80%;" /></p><p>我也尝试能否直接在文件中给它直接赋值毕竟只是<code>json</code>,好吧，并不行。所以主要文件在.moc3是吧。</p><img src="./63693/image-20250211212751480.png" alt="image-20250211212751480" style="zoom:80%;" /><p>假装高冷所以忽视我吗，哈基MO，你这家伙。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3笔记速查(张天禹)</title>
      <link href="/posts/41435.html"/>
      <url>/posts/41435.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1. Vue3简介"></a>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is:pr+is:merged+-author:app/dependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs&#x2F;core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="./41435/1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /></li></ul><h2 id="1-1-【性能的提升】"><a href="#1-1-【性能的提升】" class="headerlink" title="1.1. 【性能的提升】"></a>1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】"><a href="#1-2-【-源码的升级】" class="headerlink" title="1.2.【 源码的升级】"></a>1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】"><a href="#1-3-【拥抱TypeScript】" class="headerlink" title="1.3. 【拥抱TypeScript】"></a>1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】"><a href="#1-4-【新的特性】" class="headerlink" title="1.4. 【新的特性】"></a>1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>……</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>……</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>……</p></li></ul></li></ol><h1 id="2-创建Vue3工程"><a href="#2-创建Vue3工程" class="headerlink" title="2. 创建Vue3工程"></a>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】"><a href="#2-1-【基于-vue-cli-创建】" class="headerlink" title="2.1. 【基于 vue-cli 创建】"></a>2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli </span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行创建命令</span></span><br><span class="line">vue create vue_test</span><br><span class="line"></span><br><span class="line"><span class="comment">##  随后选择3.x</span></span><br><span class="line"><span class="comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span><br><span class="line"><span class="comment">##  &gt; 3.x</span></span><br><span class="line"><span class="comment">##    2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐"><a href="#2-2-【基于-vite-创建】-推荐" class="headerlink" title="2.2. 【基于 vite 创建】(推荐)"></a>2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="./41435/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" /><img src="./41435/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an <span class="keyword">End</span><span class="literal">-to-End</span> Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="./41435/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="./41435/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-【一个简单的效果】"><a href="#2-3-【一个简单的效果】" class="headerlink" title="2.3. 【一个简单的效果】"></a>2.3. 【一个简单的效果】</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        tel:&#x27;13888888888&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeName()&#123;</span><br><span class="line">        this.name = &#x27;zhang-san&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      changeAge()&#123;</span><br><span class="line">        this.age += 1</span><br><span class="line">      &#125;,</span><br><span class="line">      showTel()&#123;</span><br><span class="line">        alert(this.tel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="3-Vue3核心语法"><a href="#3-Vue3核心语法" class="headerlink" title="3. Vue3核心语法"></a>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】"><a href="#3-1-【OptionsAPI-与-CompositionAPI】" class="headerlink" title="3.1.  【OptionsAPI 与 CompositionAPI】"></a>3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端"><a href="#Options-API-的弊端" class="headerlink" title="Options API 的弊端"></a>Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="./41435/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="./41435/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="./41435/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="./41435/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】"><a href="#3-2-【拉开序幕的-setup】" class="headerlink" title="3.2. 【拉开序幕的 setup】"></a>3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述"><a href="#setup-概述" class="headerlink" title="setup 概述"></a>setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong>_<strong>”</strong>_，组件中所用到的：数据、方法、计算属性、监视……等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line">      let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">      // 方法，原来写在methods中</span><br><span class="line">      function changeName()&#123;</span><br><span class="line">        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class="line">        console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">      function changeAge()&#123;</span><br><span class="line">        age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">        console.log(age)</span><br><span class="line">      &#125;</span><br><span class="line">      function showTel()&#123;</span><br><span class="line">        alert(tel)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class="line">      return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-的返回值"><a href="#setup-的返回值" class="headerlink" title="setup 的返回值"></a>setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用<strong>（重点关注）。</strong></li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系"><a href="#setup-与-Options-API-的关系" class="headerlink" title="setup 与 Options API 的关系"></a>setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>……）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>……）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖"><a href="#setup-语法糖" class="headerlink" title="setup 语法糖"></a>setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  console.log(this) //undefined</span><br><span class="line">  </span><br><span class="line">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class="line">  let name = &#x27;张三&#x27;</span><br><span class="line">  let age = 18</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changName()&#123;</span><br><span class="line">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function changAge()&#123;</span><br><span class="line">    console.log(age)</span><br><span class="line">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li><li>第二步：<code>vite.config.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title class_">VueSetupExtend</span>() ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li></ol><h2 id="3-3-【ref-创建：基本类型的响应式数据】"><a href="#3-3-【ref-创建：基本类型的响应式数据】" class="headerlink" title="3.3. 【ref 创建：基本类型的响应式数据】"></a>3.3. 【ref 创建：基本类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li><strong>返回值：</strong>一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref(&#39;张三&#39;)</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  // tel就是一个普通的字符串，不是响应式的</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    console.log(name.value)</span><br><span class="line"></span><br><span class="line">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class="line">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    age.value += 1 </span><br><span class="line">    console.log(age.value)</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】"><a href="#3-4-【reactive-创建：对象类型的响应式数据】" class="headerlink" title="3.4. 【reactive 创建：对象类型的响应式数据】"></a>3.4. 【reactive 创建：对象类型的响应式数据】</h2><ul><li><strong>作用：</strong>定义一个<strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li><strong>返回值：</strong>一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = reactive([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】"><a href="#3-5-【ref-创建：对象类型的响应式数据】" class="headerlink" title="3.5. 【ref 创建：对象类型的响应式数据】"></a>3.5. 【ref 创建：对象类型的响应式数据】</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = ref([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = ref(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(car)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.value.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.value.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】"><a href="#3-6-【ref-对比-reactive】" class="headerlink" title="3.6. 【ref 对比 reactive】"></a>3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="./41435/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：</li></ul><blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote><h2 id="3-7-【toRefs-与-toRef】"><a href="#3-7-【toRefs-与-toRef】" class="headerlink" title="3.7. 【toRefs 与 toRef】"></a>3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class="line">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class="line"></span><br><span class="line">  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力</span><br><span class="line">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    name.value += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeGender()&#123;</span><br><span class="line">    gender.value = &#x27;女&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-8-【computed】"><a href="#3-8-【computed】" class="headerlink" title="3.8. 【computed】"></a>3.8. 【computed】</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="./41435/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class="line">  let lastName = ref(&#x27;san&#x27;)</span><br><span class="line"></span><br><span class="line">  // 计算属性——只读取，不修改</span><br><span class="line">  /* let fullName = computed(()=&gt;&#123;</span><br><span class="line">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算属性——既读取又修改</span><br><span class="line">  let fullName = computed(&#123;</span><br><span class="line">    // 读取</span><br><span class="line">    get()&#123;</span><br><span class="line">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改</span><br><span class="line">    set(val)&#123;</span><br><span class="line">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class="line">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class="line">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function changeFullName()&#123;</span><br><span class="line">    fullName.value = &#x27;li-si&#x27;</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-【watch】"><a href="#3-9-【watch】" class="headerlink" title="3.9.【watch】"></a>3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li></ul><blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一"><a href="#情况一" class="headerlink" title="* 情况一"></a>* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class="line">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">    if(newValue &gt;= 10)&#123;</span><br><span class="line">      stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况二"><a href="#情况二" class="headerlink" title="* 情况二"></a>* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = ref(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.value.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.value.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /* </span><br><span class="line">    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class="line">    watch的第一个参数是：被监视的数据</span><br><span class="line">    watch的第二个参数是：监视的回调</span><br><span class="line">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class="line">  */</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况三"><a href="#情况三" class="headerlink" title="*  情况三"></a>*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  let obj = reactive(&#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">      b:&#123;</span><br><span class="line">        c:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function test()&#123;</span><br><span class="line">    obj.a.b.c = 888</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况四"><a href="#情况四" class="headerlink" title="* 情况四"></a>* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class="line">  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class="line">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况五"><a href="#情况五" class="headerlink" title="* 情况五"></a>* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况五：监视上述的多个数据</span><br><span class="line">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】"><a href="#3-10-【watchEffect】" class="headerlink" title="3.10. 【watchEffect】"></a>3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class="line">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let temp = ref(0)</span><br><span class="line">  let height = ref(0)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changePrice()&#123;</span><br><span class="line">    temp.value += 10</span><br><span class="line">  &#125;</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    height.value += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class="line">  watch([temp,height],(value)=&gt;&#123;</span><br><span class="line">    // 从value中获取最新的temp值、height值</span><br><span class="line">    const [newTemp,newHeight] = value</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 用watchEffect实现，不用</span><br><span class="line">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class="line">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 水温达到100，或水位达到50，取消监视</span><br><span class="line">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class="line">      console.log(&#x27;清理了&#x27;)</span><br><span class="line">      stopWtach()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】"><a href="#3-11-【标签的-ref-属性】" class="headerlink" title="3.11. 【标签的 ref 属性】"></a>3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class="line">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let title1 = ref()</span><br><span class="line">  let title2 = ref()</span><br><span class="line">  let title3 = ref()</span><br><span class="line"></span><br><span class="line">  function showLog()&#123;</span><br><span class="line">    // 通过id获取元素</span><br><span class="line">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class="line">    // 打印内容</span><br><span class="line">    console.log((t1 as HTMLElement).innerText)</span><br><span class="line">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class="line">    console.log(t1?.innerText)</span><br><span class="line">    </span><br><span class="line">/************************************/</span><br><span class="line"></span><br><span class="line">    // 通过ref获取元素</span><br><span class="line">    console.log(title1.value)</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">    console.log(title3.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let ren = ref()</span><br><span class="line"></span><br><span class="line">  function test()&#123;</span><br><span class="line">    console.log(ren.value.name)</span><br><span class="line">    console.log(ren.value.age)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line">// 数据</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  /****************************/</span><br><span class="line">  /****************************/</span><br><span class="line">  // 使用defineExpose将组件中的数据交给外部</span><br><span class="line">  defineExpose(&#123;name,age&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-【props】"><a href="#3-12-【props】" class="headerlink" title="3.12. 【props】"></a>3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口，限制每个Person对象的格式</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">PersonInter</span> &#123;</span><br><span class="line"><span class="attr">id</span>:string,</span><br><span class="line"><span class="attr">name</span>:string,</span><br><span class="line"> <span class="attr">age</span>:number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个自定义类型Persons</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line"> import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class="line"></span><br><span class="line"> let persons = reactive&lt;Persons&gt;([</span><br><span class="line">  &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">   &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">    &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">  ])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">     &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class="line"></span><br><span class="line">// 第一种写法：仅接收</span><br><span class="line">// const props = defineProps([&#x27;list&#x27;])</span><br><span class="line"></span><br><span class="line">// 第二种写法：接收+限制类型</span><br><span class="line">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class="line">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class="line">  list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class="line">&#125;)</span><br><span class="line">console.log(props)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】"><a href="#3-13-【生命周期】" class="headerlink" title="3.13. 【生命周期】"></a>3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue3写法 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123; </span><br><span class="line">    ref, </span><br><span class="line">    onBeforeMount, </span><br><span class="line">    onMounted, </span><br><span class="line">    onBeforeUpdate, </span><br><span class="line">    onUpdated, </span><br><span class="line">    onBeforeUnmount, </span><br><span class="line">    onUnmounted </span><br><span class="line">  &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum() &#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;setup&#x27;)</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】"><a href="#3-14-【自定义hook】" class="headerlink" title="3.14. 【自定义hook】"></a>3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">increment</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;sum,increment,decrement&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios,&#123;<span class="title class_">AxiosError</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> dogList = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 发请求</span></span><br><span class="line">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)</span><br><span class="line">      <span class="comment">// 维护数据</span></span><br><span class="line">      dogList.<span class="title function_">push</span>(data.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">const</span> err = &lt;<span class="title class_">AxiosError</span>&gt;error</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">getDog</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;dogList,getDog&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; </span><br><span class="line">  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;defineComponent&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import useSum from &#x27;./hooks/useSum&#x27;</span><br><span class="line">  import useDog from &#x27;./hooks/useDog&#x27;</span><br><span class="line"></span><br><span class="line">  let &#123;sum,increment,decrement&#125; = useSum()</span><br><span class="line">  let &#123;dogList,getDog&#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="4-路由"><a href="#4-路由" class="headerlink" title="4. 路由"></a>4. 路由</h1><h2 id="4-1-【对路由的理解】"><a href="#4-1-【对路由的理解】" class="headerlink" title="4.1. 【对路由的理解】"></a>4.1. 【对路由的理解】</h2><img src="./41435/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】"><a href="#4-2-【基本切换效果】" class="headerlink" title="4.2. 【基本切换效果】"></a>4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】"><a href="#4-3-【两个注意点】" class="headerlink" title="4.3. 【两个注意点】"></a>4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】"><a href="#4-4-【路由器工作模式】" class="headerlink" title="4.4.【路由器工作模式】"></a>4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">//history模式</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(), <span class="comment">//hash模式</span></span><br><span class="line"><span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】"><a href="#4-5-【to的两种写法】" class="headerlink" title="4.5. 【to的两种写法】"></a>4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-【命名路由】"><a href="#4-6-【命名路由】" class="headerlink" title="4.6. 【命名路由】"></a>4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】"><a href="#4-7-【嵌套路由】" class="headerlink" title="4.7. 【嵌套路由】"></a>4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;news&quot;&gt;</span><br><span class="line">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class="line">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;news.name&#125;&#125;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class="line">      &lt;RouterView/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】"><a href="#4-8-【路由传参】" class="headerlink" title="4.8. 【路由传参】"></a>4.8. 【路由传参】</h2><h3 id="query参数"><a href="#query参数" class="headerlink" title="query参数"></a>query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="params参数"><a href="#params参数" class="headerlink" title="params参数"></a>params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】"><a href="#4-9-【路由的props配置】" class="headerlink" title="4.9. 【路由的props配置】"></a>4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:&#123;a:1,b:2,c:3&#125;, </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】"><a href="#4-10-【-replace属性】" class="headerlink" title="4.10. 【 replace属性】"></a>4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】"><a href="#4-11-【编程式导航】" class="headerlink" title="4.11. 【编程式导航】"></a>4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br></pre></td></tr></table></figure><h2 id="4-12-【重定向】"><a href="#4-12-【重定向】" class="headerlink" title="4.12. 【重定向】"></a>4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/about&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-pinia"><a href="#5-pinia" class="headerlink" title="5. pinia"></a>5. pinia</h1><h2 id="5-1【准备一个效果】"><a href="#5-1【准备一个效果】" class="headerlink" title="5.1【准备一个效果】"></a>5.1【准备一个效果】</h2><img src="./41435/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】"><a href="#5-2【搭建-pinia-环境】" class="headerlink" title="5.2【搭建 pinia 环境】"></a>5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入createPinia，用于创建pinia */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建pinia */</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用插件 */</span>&#123;&#125;</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】"><a href="#5-3【存储-读取数据】" class="headerlink" title="5.3【存储+读取数据】"></a>5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  // 引入对应的useXxxxxStore</span><br><span class="line">  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;</span><br><span class="line">  </span><br><span class="line">  // 调用useXxxxxStore得到对应的store</span><br><span class="line">  const sumStore = useSumStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;</span><br><span class="line">      &#123;&#123; talk.content &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;</span><br><span class="line"></span><br><span class="line">  const talkStore = useTalkStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式"><a href="#5-4-【修改数据】-三种方式" class="headerlink" title="5.4.【修改数据】(三种方式)"></a>5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countStore.<span class="property">sum</span> = <span class="number">666</span></span><br></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">countStore.$patch(&#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">999</span>,</span><br><span class="line">  <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value:number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sum</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//操作countStore中的sum</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> += value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sum</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> -= value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用countStore</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对应action</span></span><br><span class="line">countStore.<span class="title function_">incrementOdd</span>(n.<span class="property">value</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】"><a href="#5-5-【storeToRefs】" class="headerlink" title="5.5.【storeToRefs】"></a>5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;count&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">  /* 引入storeToRefs */</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">/* 得到countStore */</span><br><span class="line">  const countStore = useCountStore()</span><br><span class="line">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class="line">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-【getters】"><a href="#5-6-【getters】" class="headerlink" title="5.6.【getters】"></a>5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">/************/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">bigSum</span>:(state):<span class="function"><span class="params">number</span> =&gt;</span> state.<span class="property">sum</span> *<span class="number">10</span>,</span><br><span class="line">    <span class="title function_">upperSchool</span>():string&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>. school.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;increment,decrement&#125; = countStore</span><br><span class="line"><span class="keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】"><a href="#5-7-【-subscribe】" class="headerlink" title="5.7.【$subscribe】"></a>5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">talkStore.$subscribe(<span class="function">(<span class="params">mutate,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LoveTalk&#x27;</span>,mutate,state)</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(talkList.<span class="property">value</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】"><a href="#5-8-【store组合式写法】" class="headerlink" title="5.8. 【store组合式写法】"></a>5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// talkList就是state</span></span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;talkList&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getATalk函数相当于action</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">data</span>:&#123;<span class="attr">content</span>:title&#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),title&#125;</span><br><span class="line">    <span class="comment">// 放到数组中</span></span><br><span class="line">    talkList.<span class="title function_">unshift</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;talkList,getATalk&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="6-组件通信"><a href="#6-组件通信" class="headerlink" title="6. 组件通信"></a>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="./41435/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】"><a href="#6-1-【props】" class="headerlink" title="6.1. 【props】"></a>6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 数据</span><br><span class="line">const car = ref(&#x27;奔驰&#x27;)</span><br><span class="line">const toy = ref()</span><br><span class="line">// 方法</span><br><span class="line">function getToy(value:string)&#123;</span><br><span class="line">toy.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const toy = ref(&#x27;奥特曼&#x27;)</span><br><span class="line"></span><br><span class="line">defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】"><a href="#6-2-【自定义事件】" class="headerlink" title="6.2. 【自定义事件】"></a>6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 &#x3D;&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">send-toy</span>=<span class="string">&quot;toy = $event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中，触发事件：</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;send-toy&#x27;</span>, 具体数据)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】"><a href="#6-3-【mitt】" class="headerlink" title="6.3. 【mitt】"></a>6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mitt</span><br></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mitt </span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建emitter</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 绑定事件</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 触发事件</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;abc&#x27;,666)</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;xyz&#x27;,777)</span></span><br><span class="line"><span class="comment">  &#125;, 1000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 清理事件</span></span><br><span class="line"><span class="comment">    emitter.all.clear()</span></span><br><span class="line"><span class="comment">  &#125;, 3000); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露mitt</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-toy&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send-toy事件被触发&#x27;</span>,value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 解绑事件</span></span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;send-toy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-toy&#x27;</span>,toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】"><a href="#6-4-【v-model】" class="headerlink" title="6.4.【v-model】"></a>6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-model指令 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  type=&quot;text&quot; </span><br><span class="line">  :value=&quot;userName&quot; </span><br><span class="line">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class="line">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class="line">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class="line">&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;modelValue&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class="line">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;abc&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;abc&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】"><a href="#6-5-【-attrs-】" class="headerlink" title="6.5.【$attrs 】"></a>6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p> 注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let a = ref(1)</span><br><span class="line">let b = ref(2)</span><br><span class="line">let c = ref(3)</span><br><span class="line">let d = ref(4)</span><br><span class="line"></span><br><span class="line">function updateA(value)&#123;</span><br><span class="line">a.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】"><a href="#6-6-【-refs、-parent】" class="headerlink" title="6.6. 【$refs、$parent】"></a>6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】"><a href="#6-7-【provide、inject】" class="headerlink" title="6.7. 【provide、inject】"></a>6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">  import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class="line">  // 数据</span><br><span class="line">  let money = ref(100)</span><br><span class="line">  let car = reactive(&#123;</span><br><span class="line">    brand:&#x27;奔驰&#x27;,</span><br><span class="line">    price:100</span><br><span class="line">  &#125;)</span><br><span class="line">  // 用于更新money的方法</span><br><span class="line">  function updateMoney(value:number)&#123;</span><br><span class="line">    money.value += value</span><br><span class="line">  &#125;</span><br><span class="line">  // 提供数据</span><br><span class="line">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class="line">  provide(&#x27;car&#x27;,car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">  import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">  // 注入数据</span><br><span class="line"> let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class="line">  let car = inject(&#x27;car&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】"><a href="#6-8-【pinia】" class="headerlink" title="6.8. 【pinia】"></a>6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】"><a href="#6-9-【slot】" class="headerlink" title="6.9. 【slot】"></a>6.9. 【slot】</h2><h3 id="1-默认插槽"><a href="#1-默认插槽" class="headerlink" title="1. 默认插槽"></a>1. 默认插槽</h3><p><img src="/41435/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;!-- 默认插槽 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2. 具名插槽"></a>2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;template v-slot:s1&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template #s2&gt;</span><br><span class="line">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3. 作用域插槽"></a>3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class="line">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/Game&gt;</span><br><span class="line"></span><br><span class="line">子组件中：</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class="line">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class="line">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">        let games = reactive([</span><br><span class="line">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class="line">        ])</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="7-其它-API"><a href="#7-其它-API" class="headerlink" title="7. 其它 API"></a>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】"><a href="#7-1-【shallowRef-与-shallowReactive-】" class="headerlink" title="7.1.【shallowRef 与 shallowReactive 】"></a>7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar = <span class="title function_">shallowRef</span>(initialValue);</span><br></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="title function_">shallowReactive</span>(&#123; ... &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】"><a href="#7-2-【readonly-与-shallowReadonly】" class="headerlink" title="7.2.【readonly 与 shallowReadonly】"></a>7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> readOnlyCopy = <span class="title function_">readonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><a href="#shallowReadonly" class="headerlink" title="shallowReadonly"></a><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> shallowReadOnlyCopy = <span class="title function_">shallowReadonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】"><a href="#7-3-【toRaw-与-markRaw】" class="headerlink" title="7.3.【toRaw 与 markRaw】"></a>7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问&#x2F;跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* toRaw */</span></span><br><span class="line"><span class="comment">// 响应式对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// 原始对象</span></span><br><span class="line"><span class="keyword">let</span> rawPerson = <span class="title function_">toRaw</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citysd = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(rawPerson))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citys = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】"><a href="#7-4-【customRef】" class="headerlink" title="7.4.【customRef】"></a>7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"><span class="attr">initValue</span>:<span class="built_in">string</span>,<span class="attr">delay</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">track</span>() <span class="comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span></span><br><span class="line">        <span class="keyword">return</span> initValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          initValue = value</span><br><span class="line">          <span class="title function_">trigger</span>() <span class="comment">//通知Vue数据msg变化了</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><h1 id="8-Vue3新组件"><a href="#8-Vue3新组件" class="headerlink" title="8. Vue3新组件"></a>8. Vue3新组件</h1><h2 id="8-1-【Teleport】"><a href="#8-1-【Teleport】" class="headerlink" title="8.1. 【Teleport】"></a>8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&#x27;body&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是弹窗中的一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-【Suspense】"><a href="#8-2-【Suspense】" class="headerlink" title="8.2. 【Suspense】"></a>8.2. 【Suspense】</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验 </li><li>使用步骤： <ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">            &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">            &lt;h3&gt;加载中.......&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】"><a href="#8-3-【全局API转移到应用对象】" class="headerlink" title="8.3.【全局API转移到应用对象】"></a>8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】"><a href="#8-4-【其他】" class="headerlink" title="8.4.【其他】"></a>8.4.【其他】</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>……</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo自动部署到GithubAction</title>
      <link href="/posts/13653.html"/>
      <url>/posts/13653.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直是本地生成静态页面，然后 deploy 到仓库里。但觉得这样不够优雅，并且想要临时修改的话就只能在电脑上修改，其他移动设备上无法临时修改。所以参考<a href="https://akilar.top/posts/f752c86d/">https://akilar.top/posts/f752c86d/</a> <a href="https://akilar.top/">Akilar</a>大佬的博客，对我的博客进行修改，也从一个小白的视角进行记录。（这篇文章就是采用新的部署方式）</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备两个仓库，一个 private，一个 public。<br>private 用于存储 hexo 源码，（为什么是 private?因为要用到 token 信息）。用于监测 push，然后把生成的静态文件推送到这个 public 的仓库里。</p><p>public 起名 istomoyo(你的用户名).github.io。</p><h2 id="获取-Token"><a href="#获取-Token" class="headerlink" title="获取 Token"></a>获取 Token</h2><p>[Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;</p><p><strong>在这 Token(classic)</strong></p><img src="./13653/image-20241212114353601.png" alt="image-20241212114353601" style="zoom:50%;" /><p><strong>Generate new token</strong></p><img src="./13653/image-20241212104730410.png" alt="image-20241212104730410" style="zoom:50%;" /><p><strong>名称随便起，时长选择永久，勾选 workflow 和 repo</strong></p><img src="./13653/image-20241212104920795.png" alt="image-20241212104920795" style="zoom:50%;" /><p><strong>获取生成后的 token,临时保存一下（忘记就只能重新生成）</strong></p><h2 id="配置-private-仓库"><a href="#配置-private-仓库" class="headerlink" title="配置 private 仓库"></a>配置 private 仓库</h2><p>private（就是你存放 hexo 源码）</p><p>新建.github&#x2F;workflows&#x2F;autodeploy.yml 文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到 main 分支时，启动 Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 2020年10月后 GitHub 新建仓库默认分支改为 main，注意更改</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span> <span class="comment"># ✅ 更新到 v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">main</span> <span class="comment"># 2020年10月后 GitHub 新建仓库默认分支改为 main，注意更改</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span> <span class="comment"># ✅ 更新到 v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;20.13.0&quot;</span> <span class="comment"># action 使用的 Node 版本，建议大版本和本地保持一致</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v3</span> <span class="comment"># ✅ 更新到 v3</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            $&#123;&#123; runner.os &#125;&#125;-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean</span></span><br><span class="line"><span class="string">          hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          cd ./public</span></span><br><span class="line"><span class="string">          git config --global init.defaultBranch main</span></span><br><span class="line"><span class="string">          git init</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;$&#123;&#123; secrets.GITHUBEMAIL &#125;&#125;&#x27;</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          git commit -m &quot;$&#123;&#123; github.event.head_commit.message &#125;&#125; $(date +&quot;%Z %Y-%m-%d %A %H:%M:%S&quot;) Updated By Github Actions&quot;</span></span><br><span class="line"><span class="string">          git push --force --quiet &quot;https://$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITHUBTOKEN &#125;&#125;@github.com/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITHUBUSERNAME &#125;&#125;.github.io.git&quot; main:main</span></span><br><span class="line"><span class="string">          # git push --force --quiet &quot;https://$&#123;&#123; secrets.TOKENUSER &#125;&#125;:$&#123;&#123; secrets.CODINGTOKEN &#125;&#125;@e.coding.net/$&#123;&#123; secrets.CODINGUSERNAME &#125;&#125;/$&#123;&#123; secrets.CODINGBLOGREPO &#125;&#125;.git&quot; main:main # Coding 部署</span></span><br><span class="line"><span class="string">          # git push --force --quiet &quot;https://$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;:$&#123;&#123; secrets.GITEETOKEN &#125;&#125;@gitee.com/$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;/$&#123;&#123; secrets.GITEEUSERNAME &#125;&#125;.git&quot; main:main # Gitee 部署</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>需要注意的是，2020 年 10 月后 github 新建仓库默认分支改为 main。注意你仓库中是什么分支。</p><p>都是 main 分支的话，需要加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global init.defaultBranch main</span><br></pre></td></tr></table></figure><p>使得所有新初始化的仓库默认分支名称为 <code>main</code> 而不是 <code>master</code>。</p><p>佬的博客下面的评论也提到了。</p><hr><p>之后需要自己到仓库(private 的那个)的 Settings-&gt;Secrets-&gt;actions 下添加环境变量</p><img src="./13653/image-20241212110656577.png" alt="image-20241212110656577" style="zoom:50%;" /><p>需要添加三个变量(点击右边的 New reposistory secret 添加)</p><table><thead><tr><th align="center">Name</th><th align="center">Value</th><th align="center">是什么</th></tr></thead><tbody><tr><td align="center">GITHUBUSERNAME</td><td align="center">istomoyo</td><td align="center">github 用户名</td></tr><tr><td align="center">GITHUBEMAIL</td><td align="center">***</td><td align="center">github 绑定的邮箱</td></tr><tr><td align="center">GITHUBTOKEN</td><td align="center">***</td><td align="center">刚才让你保存的 token</td></tr></tbody></table><img src="./13653/image-20241212111043255.png" alt="image-20241212111043255" style="zoom:50%;" /><hr><p><strong>细微部分</strong></p><ol><li><p>在你的主题文件夹下(themes&#x2F;butterfly&#x2F;.git),我的是 butterfly。删除或者移动他，否则 git 不会让你 push 的。</p></li><li><p>添加屏蔽项（在.gitignore 文件中）<br>为了减少上传的文件，加快提交速度。（这个可以根据自己的情况来决定怎么写）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br></pre></td></tr></table></figure></li></ol><p>之后再推送到对应的仓库就 ok 了。</p><p>参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;github action update&quot; #引号内的内容可以自行更改作为提交记录。</span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><p>可以在对应 github action 查看部署情况</p><img src="./13653/image-20241212112207790.png" alt="image-20241212112207790" style="zoom:50%;" /><p>这样应该就 ok 了。可以试试看</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomoyo&#39;s first blog</title>
      <link href="/posts/30662.html"/>
      <url>/posts/30662.html</url>
      
        <content type="html"><![CDATA[<h1 id="tomoyo-s-first-blog"><a href="#tomoyo-s-first-blog" class="headerlink" title="tomoyo&#96;s first blog"></a>tomoyo&#96;s first blog</h1><h3 id="用来写什么？"><a href="#用来写什么？" class="headerlink" title="用来写什么？"></a>用来写什么？</h3><p>2024-12-3-15:32 Nefu 校园内（是的,bro,这个时候你刚刚考完万恶的系统分析 🙃，周五还有计组，5 章一张没看）</p><p>会用来记录 tomoy&#96;s blog 的发展和维护（虽然是静态页面 😂,仓库里是 html,css,js，但以后会添加一些好玩的功能的 🤗,锻炼一下自己贫瘠的脑子。）</p><p>由于自身的能力限制，无法添加好看的页面或者功能（比如添加评论？视频？）</p><p>而且面临考研，任务艰巨…但万事开头难，先做起来，之后在去慢慢修改喽 😇</p><img src="./30662/1.png" alt="みっくみく！！！_0" style="zoom:50%;" /><h3 id="2024-12-12"><a href="#2024-12-12" class="headerlink" title="2024-12-12"></a>2024-12-12</h3><ol><li>更新了更好的部署方式，源码放在了私有仓库。</li><li>添加了搜索功能。</li></ol><img src="https://istomoyo.github.io/posts/13653/coverImg.jpg"><h3 id="2025-1-16"><a href="#2025-1-16" class="headerlink" title="2025-1-16"></a>2025-1-16</h3><p>1.添加音乐（两首音乐都来自我最喜欢的动漫之中，SWEET DROPS 是白兔糖[白兔玩偶]的 op，Childhood 是乒乓中的一段 bgm😗）</p><div style="width:100%; display:flex; justify-content: center; "><img src="./30662/baitutang.png"     style="display:block; width:40%; object-fit: contain;">    <img src="./30662/pingpang.jpg"         style="display:block; width:40%; object-fit: contain;"></div><p>2.样式进行细微调整</p><h3 id="2025-2-11"><a href="#2025-2-11" class="headerlink" title="2025-2-11"></a>2025-2-11</h3><p>1.添加看板娘<a href="%5B%5Blive2D%E5%85%8D%E8%B4%B9%E6%A8%A1%E5%9E%8B/%E6%8D%8F%E8%84%B8%5DMO_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1iY411S7Rd/?spm_id_from=333.337.search-card.all.click&vd_source=f5f4a2cb8283165a364cff0e793d3f2f)">MO</a>（随便选的,免费的）😙</p><p>2.使用Giscus添加评论功能</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> First Post </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
